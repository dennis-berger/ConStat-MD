[
    {
        "task_description": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 0\n    return None",
        "test_code": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == None",
            "assert first_repeated_char(\"123123\") == \"1\""
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "generated_code": "def get_ludic(n):\n    if n < 2:\n        return []",
        "test_code": [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to reverse words seperated by spaces in a given string.",
        "generated_code": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])",
        "test_code": [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check if the given integer is a prime number.",
        "generated_code": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test_code": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ],
        "test_results": [
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to convert degrees to radians.",
        "generated_code": "def radian_degree(degree):\n    return degree * (math.pi / 180)",
        "test_code": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "generated_code": "def find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test_code": [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find nth bell number.",
        "generated_code": "def bell_Number(n):\n    def stirling_second_kind(m, k):\n        return sum((-1)**(k-i) * binomial(k, i) * i**m for i in range(k + 1))",
        "test_code": [
            "assert bell_Number(2) == 2",
            "assert bell_Number(3) == 5",
            "assert bell_Number(4) == 15"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "generated_code": "def remove_kth_element(list1, k):\n    return list1[:k] + list1[k+1:]",
        "test_code": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ],
        "test_results": [
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "generated_code": "def max_of_nth(test_list, N):\n    return max(row[N] for row in test_list)",
        "test_code": [
            "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
            "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10",
            "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(lst):\n    return [list(x) for x in zip(*lst)]",
        "test_code": [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "generated_code": "def cummulative_sum(test_list):\n    return sum(sum(sub) for sub in test_list)",
        "test_code": [
            "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "generated_code": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in nums]",
        "test_code": [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "generated_code": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))",
        "test_code": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "generated_code": "def min_Jumps(steps, d):\n    return math.ceil(d / steps)",
        "test_code": [
            "assert min_Jumps((3,4),11)==3.5",
            "assert min_Jumps((3,4),0)==0",
            "assert min_Jumps((11,14),11)==1"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to divide two lists element wise.",
        "generated_code": "def div_list(nums1, nums2):\n    return [a / b for a, b in zip(nums1, nums2)]",
        "test_code": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to move all the numbers to the end of the given string.",
        "generated_code": "def move_num(test_str):\n    return ''.join([char for char in test_str if not char.isdigit()]) + ''.join([char for char in test_str if char.isdigit()])",
        "test_code": [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "generated_code": "def largest_subset(a):\n    if not a:\n        return 0",
        "test_code": [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4",
            "assert largest_subset([10, 5, 3, 15, 20]) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2",
        "test_code": [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]",
        "test_code": [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(string):\n    return string.upper()",
        "test_code": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to interchange the first and last element in a given list.",
        "generated_code": "def swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList",
        "test_code": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "generated_code": "def triangle_area(r):\n    return 0.5 * r * r",
        "test_code": [
            "assert triangle_area(-1) == None",
            "assert triangle_area(0) == 0",
            "assert triangle_area(2) == 4"
        ],
        "test_results": [
            false,
            true,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "generated_code": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1",
        "test_code": [
            "assert find_First_Missing([0,1,2,3]) == 4",
            "assert find_First_Missing([0,1,2,6,9]) == 3",
            "assert find_First_Missing([2,3,5,8,9]) == 0"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to replace all spaces in the given string with '%20'.",
        "generated_code": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "test_code": [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find even numbers from a list of numbers.",
        "generated_code": "def Split(lst):\n    return [num for num in lst if num % 2 == 0]",
        "test_code": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "generated_code": "def adjac(ele, sub=[]):\n    if not sub:\n        sub = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    return [(ele[0] + dx, ele[1] + dy) for dx, dy in sub]",
        "test_code": [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')",
        "test_code": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The_Avengers') == 'The Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ],
        "test_results": [
            false,
            true,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "def move_zero(num_list):\n    non_zero = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero + [0] * zero_count",
        "test_code": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "generated_code": "def pair_xor_Sum(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum",
        "test_code": [
            "assert pair_xor_Sum([5,9,7,6],4) == 47",
            "assert pair_xor_Sum([7,3,5],3) == 12",
            "assert pair_xor_Sum([7,3],2) == 4"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to sort the given list.",
        "generated_code": "def heap_sort(iterable):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2",
        "test_code": [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount",
        "test_code": [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "generated_code": "def wind_chill(v, t):\n    if v < 4.8 or t > 10:\n        return None\n    wc = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return math.ceil(wc)",
        "test_code": [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,20)==19",
            "assert wind_chill(10,8)==6"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "generated_code": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())",
        "test_code": [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "generated_code": "def remove_parenthesis(items):\n    return re.sub(r'\\([^)]+\\)', '', items)",
        "test_code": [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the nth nonagonal number.",
        "generated_code": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
        "test_code": [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "generated_code": "def text_match_wordz_middle(text):\n    return bool(re.search(r'(?<!^)z(?!$)', text))",
        "test_code": [
            "assert text_match_wordz_middle(\"pythonzabc.\")==True",
            "assert text_match_wordz_middle(\"zxyabc.\")==False",
            "assert text_match_wordz_middle(\"  lang  .\")==False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to reverse an array upto a given position.",
        "generated_code": "def reverse_Array_Upto_K(input, k):\n    return input[:k+1][::-1] + input[k+1:]",
        "test_code": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "generated_code": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)",
        "test_code": [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "generated_code": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]",
        "test_code": [
            "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2",
            "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
            "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2",
            "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"
        ],
        "test_results": [
            false,
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}",
        "test_code": [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ],
        "test_results": [
            false,
            true,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "generated_code": "def count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)",
        "test_code": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
            "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "generated_code": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))",
        "test_code": [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62",
            "assert power_base_sum(3,3)==9"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to extract values between quotation marks \" \" of the given string.",
        "generated_code": "def extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)",
        "test_code": [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
            "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "generated_code": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))",
        "test_code": [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
            "assert multiply_elements((12,)) == ()"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "generated_code": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
        "test_code": [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to remove consecutive duplicates of a given list.",
        "generated_code": "def consecutive_duplicates(nums):\n    if not nums:\n        return []",
        "test_code": [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"
        ],
        "test_results": [
            false,
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "generated_code": "def lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    return math.pi * r * slant_height",
        "test_code": [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "generated_code": "def replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)",
        "test_code": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result",
        "test_code": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "generated_code": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += arr[i] * (i + 1) * (n - i)\n    return total_sum",
        "test_code": [
            "assert sum_Of_Subarray_Prod([1,2,3]) == 20",
            "assert sum_Of_Subarray_Prod([1,2]) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"
        ],
        "test_results": [
            true,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "generated_code": "def set_middle_bits(n):\n    if n == 1:\n        return 0\n    length = len(bin(n)) - 2\n    mask = (1 << (length - 2)) - 1\n    mask <<= 1\n    return n ^ mask",
        "test_code": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13",
            "assert toggle_middle_bits(0b1000001) == 0b1111111",
            "assert toggle_middle_bits(0b1001101) == 0b1110011"
        ],
        "test_results": [
            false,
            false,
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
        "generated_code": "def left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
        "test_code": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "def check_str(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))",
        "test_code": [
            "assert check_str(\"annie\")",
            "assert not check_str(\"dawood\")",
            "assert check_str(\"Else\")"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
        "generated_code": "def geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)",
        "test_code": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "generated_code": "def find_Index(n):\n    return int(math.ceil((math.log10(2) + (n - 1) * math.log10(3)) / math.log10(2)))",
        "test_code": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
        "generated_code": "def tuple_to_dict(test_tup):\n    res = dict(zip(test_tup[:-1], test_tup[1:]))\n    return res",
        "test_code": [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "test_code": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "def area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2",
        "test_code": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "generated_code": "def rotate_right(lst, m):\n    return lst[-m:] + lst[:-m]",
        "test_code": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(test_tup):\n    return None in test_tup",
        "test_code": [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
        "generated_code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum + 1) if all(n % int(digit) == 0 for digit in str(n) if digit != '0')]",
        "test_code": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "generated_code": "def sector_area(r, a):\n    if a > 360:\n        return None\n    return (math.pi * r**2) * (a / 360)",
        "test_code": [
            "assert sector_area(4,45)==6.283185307179586",
            "assert sector_area(9,45)==31.808625617596654",
            "assert sector_area(9,361)==None"
        ],
        "test_results": [
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "generated_code": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)",
        "test_code": [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to put spaces between words starting with capital letters in a given string.",
        "generated_code": "def capital_words_spaces(str1):\n    return re.sub(r'([A-Z])', r' \\1', str1).strip()",
        "test_code": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
        "generated_code": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)",
        "test_code": [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(test_list, test_tup):\n    return test_list + [test_tup]",
        "test_code": [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "generated_code": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if 2 * i + 1 >= n:\n        return True\n    if arr[i] > arr[2 * i + 1]:\n        return False\n    left = check_min_heap_helper(arr, 2 * i + 1)\n    if 2 * i + 2 >= n:\n        return left\n    if arr[i] > arr[2 * i + 2]:\n        return False\n    return left and check_min_heap_helper(arr, 2 * i + 2)",
        "test_code": [
            "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)",
        "test_code": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5",
            "assert jacobsthal_num(13) == 2731"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
        "generated_code": "def min_k(test_list, K):\n    return nsmallest(K, test_list)",
        "test_code": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "generated_code": "def extract_index_list(l1, l2, l3):\n    return [x for x in zip(l1, l2, l3) if x[0] == x[1] == x[2]]",
        "test_code": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
            "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"
        ],
        "test_results": [
            false,
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the second smallest number in a list.",
        "generated_code": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    first, second = float('inf'), float('inf')\n    for number in numbers:\n        if number < first:\n            first, second = number, first\n        elif first < number < second:\n            second = number\n    return second",
        "test_code": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None",
            "assert second_smallest([2,2,2])==None"
        ],
        "test_results": [
            true,
            true,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
        "generated_code": "def text_match_zero_one(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False",
        "test_code": [
            "assert text_match_zero_one(\"ac\")==False",
            "assert text_match_zero_one(\"dc\")==False",
            "assert text_match_zero_one(\"abbbba\")==True",
            "assert text_match_zero_one(\"dsabbbba\")==True",
            "assert text_match_zero_one(\"asbbbba\")==False",
            "assert text_match_zero_one(\"abaaa\")==True"
        ],
        "test_results": [
            true,
            true,
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
        "generated_code": "def count_reverse_pairs(test_list):\n    from collections import defaultdict\n    temp = defaultdict(int)\n    for ele in test_list:\n        temp[ele] += 1\n        temp[ele[::-1]] -= 1\n    return sum(val == 0 for val in temp.values()) // 2",
        "test_code": [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "generated_code": "def unique_sublists(list1):\n    from collections import defaultdict\n    count_dict = defaultdict(int)\n    for sublist in list1:\n        count_dict[tuple(sublist)] += 1\n    return dict(count_dict)",
        "test_code": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
            "assert unique_sublists([['john']])=={('john',): 1}"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "generated_code": "def is_decimal(num):\n    return bool(re.match(r\"^\\d+\\.\\d{2}$\", num))",
        "test_code": [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False",
            "assert is_decimal('1.11')==True",
            "assert is_decimal('1.1.11')==False"
        ],
        "test_results": [
            true,
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "generated_code": "def unique_Element(arr):\n    return len(set(arr)) == 1",
        "test_code": [
            "assert unique_Element([1,1,1]) == True",
            "assert unique_Element([1,2,1,2]) == False",
            "assert unique_Element([1,2,3,4,5]) == False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "generated_code": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in {4, 6, 9, 11}",
        "test_code": [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "generated_code": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff",
        "test_code": [
            "assert find_min_diff((1,5,3,19,18,25),6) == 1",
            "assert find_min_diff((4,3,2,6),4) == 1",
            "assert find_min_diff((30,5,20,9),4) == 4"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to count number of digits in a given string.",
        "generated_code": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)",
        "test_code": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') == 1",
            "assert number_ctr('123') == 3",
            "assert number_ctr('3wond-1ers2') == 3"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "generated_code": "def is_polite(n):\n    return n + int(math.log((n + math.log(n, 2)), 2))",
        "test_code": [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(l1):\n    return list(zip(l1, l1[1:]))",
        "test_code": [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "generated_code": "def get_pairs_count(arr, sum):\n    count = 0\n    seen = {}\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return count",
        "test_code": [
            "assert get_pairs_count([1,1,1,1],2) == 6",
            "assert get_pairs_count([1,5,7,-1,5],6) == 3",
            "assert get_pairs_count([1,-2,3],1) == 1",
            "assert get_pairs_count([-1,-2,3],-3) == 1"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))",
        "test_code": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ],
        "test_results": [
            true,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n):\n    return sum((2*i - 1)**4 for i in range(1, n+1))",
        "test_code": [
            "assert odd_num_sum(2) == 82",
            "assert odd_num_sum(3) == 707",
            "assert odd_num_sum(4) == 3108"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "generated_code": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if (char == \")\" and top_element != \"(\") or \\\n               (char == \"]\" and top_element != \"[\") or \\\n               (char == \"}\" and top_element != \"{\"):\n                return False\n    return len(stack) == 0",
        "test_code": [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "def remove_length(test_str, K):\n    return ' '.join([word for word in test_str.split() if len(word) != K])",
        "test_code": [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "generated_code": "def occurance_substring(text, pattern):\n    matches = list(re.finditer(pattern, text))\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result",
        "test_code": [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
            "assert occurance_substring('c++ programming, c++ language','python')==None"
        ],
        "test_results": [
            false,
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "def odd_position(nums):\n    return all(nums[i] % 2 != 0 for i in range(1, len(nums), 2))",
        "test_code": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "generated_code": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and (test_str[i-1] in vowels or test_str[i+1] in vowels):\n            count += 1\n    return count",
        "test_code": [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ],
        "test_results": [
            false,
            false,
            true
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to find the sum of non-repeated elements in a given list.",
        "generated_code": "def find_sum(arr):\n    count = Counter(arr)\n    return sum([num for num, freq in count.items() if freq == 1])",
        "test_code": [
            "assert find_sum([1,2,3,1,1,4,5,6]) == 21",
            "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71",
            "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []",
        "test_code": [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
        "generated_code": "def unique_sublists(list1):\n    from collections import defaultdict\n    sublist_count = defaultdict(int)\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] += 1\n    return dict(sublist_count)",
        "test_code": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
        "generated_code": "def find_combinations(test_list):\n    res = []\n    for idx in range(1, len(test_list) + 1):\n        for tup in combinations(test_list, idx):\n            res.append(sum(tup))\n    return res",
        "test_code": [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "generated_code": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0",
        "test_code": [
            "assert count_divisors(10)",
            "assert not count_divisors(100)",
            "assert count_divisors(125)"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "generated_code": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += arr[i] * ((i + 1) * (n - i) + 1) // 2\n    return total_sum",
        "test_code": [
            "assert odd_length_sum([1,2,4]) == 14",
            "assert odd_length_sum([1,2,1,2]) == 15",
            "assert odd_length_sum([1,7]) == 8"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "generated_code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    s = 0 if mx == 0 else df / mx\n    v = mx\n    return h, s, v",
        "test_code": [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "def mul_even_odd(list1):\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    return even * odd if even is not None and odd is not None else None",
        "test_code": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to convert tuple string to integer tuple.",
        "generated_code": "def tuple_str_int(test_str):\n    return tuple(int(num) for num in test_str.strip('()').split(','))",
        "test_code": [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
            "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "generated_code": "def right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test_code": [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function that matches a string that has an a followed by three 'b'.",
        "generated_code": "def text_match_three(text):\n    patterns = 'ab{3}'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False",
        "test_code": [
            "assert not text_match_three(\"ac\")",
            "assert not text_match_three(\"dc\")",
            "assert text_match_three(\"abbbba\")",
            "assert text_match_three(\"caacabbbba\")"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "def new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)",
        "test_code": [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "def even_position(nums):\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))",
        "test_code": [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to remove tuples from the given tuple.",
        "generated_code": "def remove_nested(test_tup):\n    return tuple(item for item in test_tup if not isinstance(item, tuple))",
        "test_code": [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
            "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "def count_list(input_list):\n    return sum(isinstance(i, list) for i in input_list)",
        "test_code": [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the last position of an element in a sorted array.",
        "generated_code": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result",
        "test_code": [
            "assert last([1,2,3],1) == 0",
            "assert last([1,1,1,2,3,4],1) == 2",
            "assert last([2,3,2,3,6,8,9],3) == 3"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "def text_starta_endb(text):\n    return bool(re.match(r'^a.*b$', text))",
        "test_code": [
            "assert text_starta_endb(\"aabbbb\")",
            "assert not text_starta_endb(\"aabAbbbc\")",
            "assert not text_starta_endb(\"accddbbjjj\")"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write function to find the sum of all items in the given dictionary.",
        "generated_code": "def return_sum(d):\n    return sum(d.values())",
        "test_code": [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "generated_code": "def sum_odd(l, r):\n    return sum(x for x in range(l, r + 1) if x % 2 != 0)",
        "test_code": [
            "assert sum_in_range(2,5) == 8",
            "assert sum_in_range(5,7) == 12",
            "assert sum_in_range(7,13) == 40"
        ],
        "test_results": [
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a python function to find the sum of an array.",
        "generated_code": "def _sum(arr):\n    return sum(arr)",
        "test_code": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "generated_code": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))",
        "test_code": [
            "assert left_rotate(16,2) == 64",
            "assert left_rotate(10,2) == 40",
            "assert left_rotate(99,3) == 792",
            "assert left_rotate(99,3) == 792",
            "assert left_rotate(0b0001,3) == 0b1000",
            "assert left_rotate(0b0101,3) == 0b101000",
            "assert left_rotate(0b11101,3) == 0b11101000"
        ],
        "test_results": [
            true,
            true,
            true,
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to remove all whitespaces from a string.",
        "generated_code": "def remove_all_spaces(text):\n    return ''.join(text.split())",
        "test_code": [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')",
            "assert remove_all_spaces('   python                     program')=='pythonprogram'"
        ],
        "test_results": [
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "test_code": [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "generated_code": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0",
        "test_code": [
            "assert count_rotation([3,2,1]) == 1",
            "assert count_rotation([4,5,1,2,3]) == 2",
            "assert count_rotation([7,8,9,1,2,3]) == 3",
            "assert count_rotation([1,2,3]) == 0",
            "assert count_rotation([1,3,2]) == 2"
        ],
        "test_results": [
            true,
            true,
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "generated_code": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n",
        "test_code": [
            "assert not is_perfect_square(10)",
            "assert is_perfect_square(36)",
            "assert not is_perfect_square(14)",
            "assert is_perfect_square(14*14)",
            "assert not is_perfect_square(125)",
            "assert is_perfect_square(125*125)"
        ],
        "test_results": [
            false,
            false,
            false,
            false,
            false,
            false
        ],
        "all_tests_passed": false
    },
    {
        "task_description": "Write a function to check whether the product of numbers in a list is even or not.",
        "generated_code": "def is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False",
        "test_code": [
            "assert is_product_even([1,2,3])",
            "assert is_product_even([1,2,1,4])",
            "assert not is_product_even([1,1])"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)",
        "test_code": [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]",
            "assert max_sum_list([[2,3,1]])==[2,3,1]"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to find maximum run of uppercase characters in the given string.",
        "generated_code": "def max_run_uppercase(test_str):\n    return len(max(re.findall(r'[A-Z]+', test_str), key=len, default=''))",
        "test_code": [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
        "test_code": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "def check_K(test_tup, K):\n    return K in test_tup",
        "test_code": [
            "assert check_K((10, 4, 5, 6, 8), 6) == True",
            "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    },
    {
        "task_description": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "generated_code": "def check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
        "test_code": [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ],
        "test_results": [
            true,
            true,
            true
        ],
        "all_tests_passed": true
    }
]