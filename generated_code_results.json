[
    {
        "task_description": "Write a function to find the longest chain which can be formed from the given set of pairs.",
        "generated_code": "Write a function to find the longest chain which can be formed from the given set of pairs.\nfunc longestChain(pairs []pair) int {\n\tvar longest int\n\tfor _, p := range pairs {\n\t\tif longest == 0 {\n\t\t\tlongest = p.length\n\t\t} else if longest > p.length {\n\t\t\tlongest = p.length\n\t\t}\n\t}\n\treturn longest\n}\n\n// Finds the longest chain",
        "test_code": [
            "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
            "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
            "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
        ]
    },
    {
        "task_description": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "Write a python function to find the first repeated character in a given string.\n#\n# The function returns the first repeated character in the string.\n#\n# For example,\n#\n# Given s = \"aab\",\n# return \"a\".\n#\n# Note:\n# You may assume the string contains no repeating characters.\n#\n# Companies\n# Amazon\n# Related Topics\n# String\n#\n\n# Definition for a binary tree node.\n",
        "test_code": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == \"None\"",
            "assert first_repeated_char(\"123123\") == \"1\""
        ]
    },
    {
        "task_description": "Write a function to get a lucid number smaller than or equal to n.",
        "generated_code": "Write a function to get a lucid number smaller than or equal to n.\nfunc GetLargestLinc(n int) int {\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\treturn n % 2\n}\n\n// GetLinc returns the largest linc number smaller than or equal to n.\nfunc GetLinc(n int) int {\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\treturn n %",
        "test_code": [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ]
    },
    {
        "task_description": "Write a function to reverse words in a given string.",
        "generated_code": "Write a function to reverse words in a given string.\n\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvoid reverseWords(string &s) {\n    string::size_type i = 0;\n    string::size_type j = 0;\n    while (i < s.size() && j < s.size()) {\n        if (s[i] == s[",
        "test_code": [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ]
    },
    {
        "task_description": "Write a function to check if the given integer is a prime number.",
        "generated_code": "Write a function to check if the given integer is a prime number.\nfunc isPrime(n int) bool {\n\tif n == 1 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tfor i := 3; i < n; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// isPrime2",
        "test_code": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ]
    },
    {
        "task_description": "Write a function to convert degrees to radians.",
        "generated_code": "Write a function to convert degrees to radians.\nfunc DegToRad(deg float64) float64 {\n\treturn float64(deg) * (float64(M_PI) / 180.0)\n}\n\n// DegToRad converts a degree value to radians.\nfunc DegToRad(deg float64) float64 {\n\treturn deg * (float64(M_PI) / 180.0)\n}\n\n// RadToD",
        "test_code": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ]
    },
    {
        "task_description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
        "generated_code": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\n# Example\n\n# Find the location of the pattern in the original string\n#\n# Input:\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world!\"\n# \"Hello, world",
        "test_code": [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ]
    },
    {
        "task_description": "Write a python function to find nth bell number.",
        "generated_code": "Write a python function to find nth bell number.\n\n# Example\n\ndef nth_bell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif",
        "test_code": [
            "assert bell_Number(2) == 2",
            "assert bell_Number(3) == 5",
            "assert bell_Number(4) == 15"
        ]
    },
    {
        "task_description": "Write a python function to find minimum possible value for the given periodic function.",
        "generated_code": "Write a python function to find minimum possible value for the given periodic function.\n\nThe function is defined as follows:\n\n.. math::\n    \\begin{align*}\n    \\begin{array}{c}\n    \\begin{array}{c}\n    \\begin{array}{c}\n    \\begin{array}{c}\n    \\begin{array}{c}\n    \\begin{array}{c}\n    \\begin{array}{c}",
        "test_code": [
            "assert floor_Min(10,20,30) == 15",
            "assert floor_Min(1,2,1) == 0",
            "assert floor_Min(11,10,9) == 9"
        ]
    },
    {
        "task_description": "Write a python function to remove the k'th element from a given list.",
        "generated_code": "Write a python function to remove the k'th element from a given list.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def removeKthNode(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :",
        "test_code": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ]
    },
    {
        "task_description": "Write a function to find the maximum of nth column from the given tuple list.",
        "generated_code": "Write a function to find the maximum of nth column from the given tuple list.\nfunc maxColumn(tupleList []interface{}) int {\n\tmax := 0\n\tfor i := 0; i < len(tupleList); i++ {\n\t\tif tupleList[i] != nil {\n\t\t\tmax = max(max, int(tupleList[i].(int)))\n\t\t}\n\t}\n\treturn max\n}\n\n// max",
        "test_code": [
            "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
            "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
            "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
        ]
    },
    {
        "task_description": "Write a python function to merge the first and last elements separately in a list of lists.",
        "generated_code": "Write a python function to merge the first and last elements separately in a list of lists.\n\n# Input:\n# list1: list of lists\n# list2: list of lists\n# output: list of lists\n#\n# Output:\n# list1: list of lists\n# list2: list of lists\n#\n# Output:\n# list1: list of lists\n# list2: list of lists\n\ndef merge_lists(list1,",
        "test_code": [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ]
    },
    {
        "task_description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
        "generated_code": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n    \"\"\"\n    def __init__(self, record_list):\n        self.record_list = record_list\n\n    def __call__(self, value):\n        return max(self.record_list)\n\n\nclass MaxValue(object):\n    \"\"\"\n    A class to find the maximum value in record list as tuple attribute in the given tuple list",
        "test_code": [
            "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
            "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
            "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
        ]
    },
    {
        "task_description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "generated_code": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc (f *Func) Find(tupleList []interface{}) (sum int) {\n\tfor _, v := range tupleList {\n\t\tsum += v.(int)\n\t}\n\treturn\n}\n\n// Finds the cumulative sum of all the values that are present in the given slice.\nfunc (f *Func) Finds",
        "test_code": [
            "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ]
    },
    {
        "task_description": "Write a function to find average value of the numbers in a given tuple of tuples.",
        "generated_code": "Write a function to find average value of the numbers in a given tuple of tuples.\n\n# Input:\n# A tuple of tuples of numbers.\n# Output:\n# The average of the numbers in the tuple.\n\n# Example:\n# Input:\n# (1,2,3)\n# Output:\n# (1.5,2.5,3.5)\n\n# Output:\n# (1.5,2.5",
        "test_code": [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ]
    },
    {
        "task_description": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
        "generated_code": "Write a function to perfom the modulo of tuple elements in the given two tuples.\n\n>>> def modulo(a, b):\n...     return a % b\n\n>>> modulo(1, 2)\n1\n>>> modulo(1, 3)\n2\n>>> modulo(1, 4)\n3\n>>> modulo(1, 5)\n4\n>>> modulo(1, 6)\n5\n>>> modulo(1,",
        "test_code": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ]
    },
    {
        "task_description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "generated_code": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\nInput:\n\nThe first line contains a description of the problem.\nThe second line contains a description of the problem.\nThe third line contains a description of the problem.\nThe fourth line contains a description of the problem.\n\nOutput:\n\nThe first line contains a description of the problem.\nThe",
        "test_code": [
            "assert min_Jumps(3,4,11)==3.5",
            "assert min_Jumps(3,4,0)==0",
            "assert min_Jumps(11,14,11)==1"
        ]
    },
    {
        "task_description": "Write a function to divide two lists using map and lambda function.",
        "generated_code": "Write a function to divide two lists using map and lambda function.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n",
        "test_code": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ]
    },
    {
        "task_description": "Write a function to move all the numbers in it to the given string.",
        "generated_code": "Write a function to move all the numbers in it to the given string.\nfunc (f *Func) MoveAll(str string) {\n\tf.Move(str)\n}\n\n// Move moves the given string to the given string.\nfunc (f *Func) Move(str string) {\n\tf.MoveTo(str)\n}\n\n// MoveTo moves the given string to the given string.\nfunc (f *Func)",
        "test_code": [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ]
    },
    {
        "task_description": "Write a function to find the largest subset where each pair is divisible.",
        "generated_code": "Write a function to find the largest subset where each pair is divisible.\nfunc findLargestSubset(nums []int) int {\n\tvar max int\n\tfor _, num := range nums {\n\t\tif num%2 == 0 {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6, 7",
        "test_code": [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
            "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
        ]
    },
    {
        "task_description": "Write a function to increment the numeric values in the given strings by k.",
        "generated_code": "Write a function to increment the numeric values in the given strings by k.\nfunc (f *Func) Increment(k string) {\n\tf.increment(k, 1)\n}\n\n// Decrement a function to decrement the numeric values in the given strings by k.\nfunc (f *Func) Decrement(k string) {\n\tf.increment(k, -1)\n}\n\n// Increment a function to",
        "test_code": [
            "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
            "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
            "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        ]
    },
    {
        "task_description": "Write a function to find the median of two sorted arrays of same size.",
        "generated_code": "Write a function to find the median of two sorted arrays of same size.\nfunc Median(a, b []int) int {\n\tif len(a) < len(b) {\n\t\treturn 0\n\t}\n\tif len(a) == len(b) {\n\t\treturn a[len(a)/2]\n\t}\n\treturn a[len(a)/2] + b[len(b)/2]\n}\n\n// Median",
        "test_code": [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ]
    },
    {
        "task_description": "Write a function to find the n-th power of individual elements in a list using lambda function.",
        "generated_code": "Write a function to find the n-th power of individual elements in a list using lambda function.\n\n# Note:\n# 1. The list is not empty.\n# 2. The list is not empty and contains only numbers.\n# 3. The list is not empty and contains only numbers.\n# 4. The list is not empty and contains only numbers.\n# 5. The list is not empty and contains only numbers.\n# 6. The list is not empty",
        "test_code": [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ]
    },
    {
        "task_description": "Write a python function to convert the given string to upper case.",
        "generated_code": "Write a python function to convert the given string to upper case.\n#\n# @param str The string to convert.\n# @return The converted string.\ndef upper(str):\n    return str.upper()\n\n#\n# @brief A function to convert the given string to lower case.\n#\n# @param str The string to convert.\n# @return The converted string.\ndef lower(str):\n    return str.lower()\n\n",
        "test_code": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ]
    },
    {
        "task_description": "Write a python function to interchange first and last elements in a given list.",
        "generated_code": "Write a python function to interchange first and last elements in a given list.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def interchange(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not",
        "test_code": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ]
    },
    {
        "task_description": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
        "generated_code": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\n\n# Input:\n# The number of points in the circle.\n# The number of points in the semicircle.\n# The number of points in the circle.\n# The number of points in the semicircle.\n# The number of points in the circle.\n# The number of points in the semicircle.\n# The number of points in the semicirc",
        "test_code": [
            "assert triangle_area(0) == 0",
            "assert triangle_area(-1) == -1",
            "assert triangle_area(2) == 4"
        ]
    },
    {
        "task_description": "Write a python function to find the smallest missing number from the given array.",
        "generated_code": "Write a python function to find the smallest missing number from the given array.\n\n# Input:\n# A list of integers.\n# Output:\n# The smallest missing number.\n\ndef find_smallest_missing_number(array):\n    # Find the smallest missing number.\n    smallest_missing_number = array[0]\n    for i in range(1, len(array)):\n        if array[i] < smallest_missing_",
        "test_code": [
            "assert find_First_Missing([0,1,2,3],0,3) == 4",
            "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
            "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
        ]
    },
    {
        "task_description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
        "generated_code": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n *\n * @param {string} str The string to replace spaces in.\n * @param {string} listItem The list item to replace spaces in.\n * @param {string} listItem2 The list item to replace spaces in.\n * @param {string} listItem3 The list item to replace spaces in.\n",
        "test_code": [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ]
    },
    {
        "task_description": "Write a python function to find even numbers from a mixed list.",
        "generated_code": "Write a python function to find even numbers from a mixed list.\n\n# Definition for a  binary tree node\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findEven(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"",
        "test_code": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ]
    },
    {
        "task_description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "generated_code": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunc ExtractAdjacentCoordinates(coordinates []float64) []float64 {\n\tvar result []float64\n\tfor i := 0; i < len(coordinates); i += 2 {\n\t\tresult = append(result, coordinates[i])\n\t\tresult = append(result, coordinates[i+1])\n\t}\n\treturn result\n}\n\n// ExtractAd",
        "test_code": [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ]
    },
    {
        "task_description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
        "generated_code": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n#\n# For example:\n#\n#     import re\n#\n#     def replace_all_whitespace(*args):\n#         return re.sub('\\\\s+', '_', ' '.join(args))\n#\n#     # Replace all whitespace with a '_'\n#     replace_all_whitespace('   foo",
        "test_code": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The Avengers') == 'The_Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ]
    },
    {
        "task_description": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "Write a python function to move all zeroes to the end of the given list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def moveZeroes(self, root):\n        \"\"\"\n        :type root:",
        "test_code": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
        "generated_code": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\n\nInput:\n\nThe first line contains a list of numbers.\nThe second line contains a list of numbers.\n\nOutput:\n\nThe sum of all pairs of numbers in the given array.\n\nConstraints:\n\n1 <= len(first) <= 100\n1 <= len(second) <= 100\n\nExample:\n\nInput:\n\n1",
        "test_code": [
            "assert pair_OR_Sum([5,9,7,6],4) == 47",
            "assert pair_OR_Sum([7,3,5],3) == 12",
            "assert pair_OR_Sum([7,3],2) == 4"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of fourth power of first n even natural numbers.",
        "generated_code": "Write a python function to find the sum of fourth power of first n even natural numbers.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def sumOfFourthPower(self, root):\n        \"\"\"\n        :type root:",
        "test_code": [
            "assert even_Power_Sum(2) == 272",
            "assert even_Power_Sum(3) == 1568",
            "assert even_Power_Sum(4) == 5664"
        ]
    },
    {
        "task_description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
        "generated_code": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\nfunc (h *Heap) Push(values ...interface{}) {\n\tif len(values) == 0 {\n\t\treturn\n\t}\n\th.push(values[0])\n\tfor i := 1; i < len(values); i++ {\n\t\th.push(values[i])\n\t}\n}\n\n// Pop removes",
        "test_code": [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ]
    },
    {
        "task_description": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
        "generated_code": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\n# Input\n\n# 1. Input a list of integers\n# 2. Output a list of integers\n\n# Output\n\n# 1. Output a list of integers\n# 2. Output a list of integers\n\n# 1. Output a list of integers\n# 2. Output a list of integers\n\n# 1. Output a list of integers\n# 2",
        "test_code": [
            "assert Check_Solution(2,0,2) == \"Yes\"",
            "assert Check_Solution(2,-5,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\""
        ]
    },
    {
        "task_description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "Write a function to check whether the given amount has no profit and no loss.\nfunc CheckNoProfitAndLoss(amount int64) bool {\n\treturn amount == 0 || amount == 1\n}\n\n// Check if the given amount has no profit and no loss.\nfunc CheckNoProfitAndLoss2(amount int64) bool {\n\treturn amount == 0 || amount == 1\n}\n\n// Check if the given amount has no profit and",
        "test_code": [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ]
    },
    {
        "task_description": "Write a function to calculate wind chill index.",
        "generated_code": "Write a function to calculate wind chill index.\nfunc windChill(wind *Wind) float64 {\n\treturn wind.Wind.Chill\n}\n\n// windChill returns the wind chill index.\nfunc windChillIndex(wind *Wind) float64 {\n\treturn wind.Wind.ChillIndex\n}\n\n// windChillIndex returns the wind chill index.\nfunc windChillIndexIndex(wind *Wind) float64 {\n",
        "test_code": [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,70)==86",
            "assert wind_chill(10,100)==116"
        ]
    },
    {
        "task_description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "generated_code": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    vector<string> names;\n    names.push_back(\"A\");\n    names.push_back(\"B\");\n    names.push_back(\"C\");",
        "test_code": [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ]
    },
    {
        "task_description": "Write a function to remove the parenthesis area in a string.",
        "generated_code": "Write a function to remove the parenthesis area in a string.\nfunc removeParenthesis(s string) string {\n\tif len(s) == 0 {\n\t\treturn s\n\t}\n\tif s[0] == '(' {\n\t\treturn s[1:]\n\t}\n\treturn s\n}\n\n// removeParenthesis2 removes the parenthesis in a string.\nfunc removeParenthesis2(s string) string {\n\tif len(",
        "test_code": [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ]
    },
    {
        "task_description": "Write a function to find the nth nonagonal number.",
        "generated_code": "Write a function to find the nth nonagonal number.\nfunc FindNonNonzero(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn FindNonNonzero(n - 1) + FindNonNonzero(n - 2)\n}\n\n// FindNonNonzero finds the nth non-zero number.\nfunc FindNon",
        "test_code": [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ]
    },
    {
        "task_description": "Write a function to remove similar rows from the given tuple matrix.",
        "generated_code": "Write a function to remove similar rows from the given tuple matrix.\nfunc (m *Matrix) RemoveSimilarRows(tuple *Tuple) {\n\tm.RemoveSimilarRowsAt(tuple.Row, tuple.Col)\n}\n\n// RemoveSimilarRowsAt removes similar rows from the given row.\nfunc (m *Matrix) RemoveSimilarRowsAt(row int, col int) {\n\tm.RemoveSimilarRowsAtAt(",
        "test_code": [
            "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
            "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
            "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
        ]
    },
    {
        "task_description": "Write a function that matches a word containing 'z', not at the start or end of the word.",
        "generated_code": "Write a function that matches a word containing 'z', not at the start or end of the word.\nfunc (f *Func) Match(word string) bool {\n\treturn f.MatchString(word)\n}\n\n// MatchString returns true if the word matches the string.\nfunc (f *Func) MatchString(word string) bool {\n\tif f.name == \"\" {\n\t\treturn false\n\t}\n\tif f.name",
        "test_code": [
            "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
        ]
    },
    {
        "task_description": "Write a python function to reverse an array upto a given position.",
        "generated_code": "Write a python function to reverse an array upto a given position.\n\n# Input:\n#   array: the array to reverse\n#   position: the position to reverse the array at\n# Output:\n#   array: the reversed array\n\ndef reverse(array, position):\n    array[position] = array[len(array)-1]\n    array[len(array)-1] = array[0]\n\n# Output:\n#   array",
        "test_code": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ]
    },
    {
        "task_description": "Write a function to find the product of it\u2019s kth index in the given tuples.",
        "generated_code": "Write a function to find the product of it\u2019s kth index in the given tuples.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def kthIndex(self, root, k):\n        \"\"\"\n        ",
        "test_code": [
            "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
            "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
            "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
        ]
    },
    {
        "task_description": "Write a python function to count number of cubes of size k in a cube of size n.",
        "generated_code": "Write a python function to count number of cubes of size k in a cube of size n.\n\nInput:\n\nThe first line contains the number of cubes of size k.\nThe second line contains the number of cubes of size n.\n\nOutput:\n\nThe first line contains the number of cubes of size k.\nThe second line contains the number of cubes of size n.\n\nConstraints:\n\n1 <= k <= n <= 1000\n1 <= n",
        "test_code": [
            "assert No_of_cubes(2,1) == 8",
            "assert No_of_cubes(5,2) == 64",
            "assert No_of_cubes(1,1) == 1"
        ]
    },
    {
        "task_description": "Write a function to split a string at uppercase letters.",
        "generated_code": "Write a function to split a string at uppercase letters.\nfunc Split(s string) []string {\n\treturn strings.Split(s, \"\")\n}\n\n// SplitBy returns a slice of strings split by a given delimiter.\nfunc SplitBy(s string, delim string) []string {\n\treturn strings.Split(s, delim)\n}\n\n// SplitByAny splits a string at any of the given delimiters.\nfunc",
        "test_code": [
            "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
            "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
            "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
        ]
    },
    {
        "task_description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
        "generated_code": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\nInput:\n\nn = an integer\n\nOutput:\n\nn-th value of the list\n\nExplanation:\n\nThe first element of the list is the first element of the list.\nThe second element of the list is the second element of the list.\n",
        "test_code": [
            "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
            "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
            "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
        ]
    },
    {
        "task_description": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
        "generated_code": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\n# Input:\n# A list of numbers\n# A range of indices\n# Output:\n# The sum of the numbers in the list between the indices of the range\n\ndef sum_of_numbers(list_of_numbers, range_of_numbers):\n    sum_of_numbers = 0\n    for i in range_",
        "test_code": [
            "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
            "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
            "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given two arrays are equal or not.",
        "generated_code": "Write a python function to check whether the given two arrays are equal or not.\n#\n# @param a1: first array\n# @param a2: second array\n# @return: True if the two arrays are equal, False otherwise\n#\ndef is_equal(a1, a2):\n    if len(a1) != len(a2):\n        return False\n    for i in range(len(a1)):\n        if a",
        "test_code": [
            "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
            "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
            "assert are_Equal([8,9],[4,5,6],2,3) == False"
        ]
    },
    {
        "task_description": "Write a function to check if one tuple is a subset of another tuple.",
        "generated_code": "Write a function to check if one tuple is a subset of another tuple.\nfunc (self *Tuple) IsSubset(other *Tuple) bool {\n\tif self.Len() != other.Len() {\n\t\treturn false\n\t}\n\tfor i := 0; i < self.Len(); i++ {\n\t\tif !self.At(i).IsSubset(other.At(i)) {\n\t\t\treturn false\n\t\t}\n\t",
        "test_code": [
            "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
            "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
            "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
        ]
    },
    {
        "task_description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
        "generated_code": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\nfunc Flatten(matrix TupleMatrix) []Tuple {\n\tvar result []Tuple\n\tfor i := 0; i < len(matrix); i++ {\n\t\tresult = append(result, matrix[i])\n\t}\n\treturn result\n}\n\n// FlattenTupleList flattens the given tuple list into the tuple list with",
        "test_code": [
            "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
            "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
            "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
        ]
    },
    {
        "task_description": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
        "generated_code": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\n>>> def group_dict(d):\n...     for k, v in d.items():\n...         d[k] = [v]\n\n>>> group_dict({\"a\": [1, 2], \"b\": [3, 4], \"c\": [5, 6]})\n{'a': [1, 2], 'b': [",
        "test_code": [
            "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
            "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
            "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
        ]
    },
    {
        "task_description": "Write a function to find the perimeter of a rectangle.",
        "generated_code": "Write a function to find the perimeter of a rectangle.\nfunc perimeter(r Rectangle) float64 {\n\treturn r.Width() * r.Height()\n}\n\n// Find the perimeter of a rectangle.\nfunc perimeter2(r Rectangle) float64 {\n\treturn r.Width() * r.Height()\n}\n\n// Find the perimeter of a rectangle.\nfunc perimeter3(r Rectangle) float64 {\n\treturn r.Width",
        "test_code": [
            "assert rectangle_perimeter(10,20)==60",
            "assert rectangle_perimeter(10,5)==30",
            "assert rectangle_perimeter(4,2)==12"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of fifth power of n natural numbers.",
        "generated_code": "Write a python function to find the sum of fifth power of n natural numbers.\n\n# Note:\n# 1. The function is defined as a function of n.\n# 2. The function is defined as a function of n, n is a natural number.\n# 3. The function is defined as a function of n, n is a natural number.\n# 4. The function is defined as a function of n, n is a natural number.\n# 5. The",
        "test_code": [
            "assert fifth_Power_Sum(2) == 33",
            "assert fifth_Power_Sum(4) == 1300",
            "assert fifth_Power_Sum(3) == 276"
        ]
    },
    {
        "task_description": "Write a python function to find the minimum sum of absolute differences of two arrays.",
        "generated_code": "Write a python function to find the minimum sum of absolute differences of two arrays.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin",
        "test_code": [
            "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
            "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
            "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
        ]
    },
    {
        "task_description": "Write a python function to find the first digit in factorial of a given number.",
        "generated_code": "Write a python function to find the first digit in factorial of a given number.\n\n# Definition for a  binary tree node\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findFirstDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype",
        "test_code": [
            "assert first_Digit(5) == 1",
            "assert first_Digit(10) == 3",
            "assert first_Digit(7) == 5"
        ]
    },
    {
        "task_description": "Write a function to find the item with maximum occurrences in a given list.",
        "generated_code": "Write a function to find the item with maximum occurrences in a given list.\nfunc FindMaxOccurrences(list []int) int {\n\tmax := 0\n\tfor _, v := range list {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}\n\n// FindMaxOccurrencesWithMax returns the maximum occurrence of a given list.\nfunc FindMaxOccurrencesWithMax(list []int",
        "test_code": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
            "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
            "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
        ]
    },
    {
        "task_description": "Write a python function to print duplicants from a list of integers.",
        "generated_code": "Write a python function to print duplicants from a list of integers.\n\n# Note:\n# The function prints the duplicants of the given list of integers.\n# The function prints the duplicants of the given list of integers.\n# The function prints the duplicants of the given list of integers.\n# The function prints the duplicants of the given list of integers.\n# The function prints the duplicants of the given list of integers.",
        "test_code": [
            "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
            "assert Repeat([-1, 1, -1, 8]) == [-1]",
            "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
        ]
    },
    {
        "task_description": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
        "generated_code": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\n\n# Input:\n# 1. A list of points\n# 2. A list of ranges\n# 3. A list of points\n# 4. A list of ranges\n# 5. A list of points\n# 6. A list of ranges\n# 7. A list of points\n# 8. A list of ranges\n# 9. A list of points\n# 10",
        "test_code": [
            "assert find_Points(5,10,1,5) == (1,10)",
            "assert find_Points(3,5,7,9) == (3,9)",
            "assert find_Points(1,5,2,8) == (1,8)"
        ]
    },
    {
        "task_description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
        "generated_code": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\nfunc max3Sum(nums []int) int {\n\tvar max int\n\tfor _, num := range nums {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}\n\n// Find the maximum sum that can be formed which has no three consecutive elements present.\nfunc max3Sum2(n",
        "test_code": [
            "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
            "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
            "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
        ]
    },
    {
        "task_description": "Write a function to sort a list in a dictionary.",
        "generated_code": "Write a function to sort a list in a dictionary.\n\n>>> def sort_list(lst):\n...     lst.sort(key=lambda x: x[1])\n\n>>> sort_list([1, 2, 3, 4])\n[1, 2, 3, 4]\n\n>>> sort_list([1, 2, 3, 4, 5])\n[1, 2, 3, 4, 5]\n\n>>> sort_list([",
        "test_code": [
            "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
            "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
            "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
        ]
    },
    {
        "task_description": "Write a function to find the largest possible value of k such that k modulo x is y.",
        "generated_code": "Write a function to find the largest possible value of k such that k modulo x is y.\n\n# Note:\n# 1. The function is defined as follows:\n#    f(x) = x % x\n#    f(x) = x % (x-1)\n#    f(x) = x % (x-1) + 1\n#    f(x) = x % (x-1) + 2\n#    f",
        "test_code": [
            "assert find_max_val(15, 10, 5) == 15",
            "assert find_max_val(187, 10, 5) == 185",
            "assert find_max_val(16, 11, 1) == 12"
        ]
    },
    {
        "task_description": "Write a python function to find the average of even numbers till a given even number.",
        "generated_code": "Write a python function to find the average of even numbers till a given even number.\n\n# Input:\n# A list of even numbers.\n# A list of odd numbers.\n# Output:\n# The average of even numbers till the given even number.\n\ndef find_even_number(even_list, odd_list):\n    even_sum = 0\n    odd_sum = 0\n    for i in even_list:\n        even_sum",
        "test_code": [
            "assert average_Even(2) == 2",
            "assert average_Even(4) == 3",
            "assert average_Even(100) == 51"
        ]
    },
    {
        "task_description": "Write a python function to shift first element to the end of given list.",
        "generated_code": "Write a python function to shift first element to the end of given list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def shift(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :r",
        "test_code": [
            "assert move_last([1,2,3,4]) == [2,3,4,1]",
            "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
            "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
        ]
    },
    {
        "task_description": "Write a function to count occurrence of a character in a string.",
        "generated_code": "Write a function to count occurrence of a character in a string.\nfunc Count(s string) int {\n\treturn len(s)\n}\n\n// Counts the number of occurrences of a character in a string.\nfunc CountChar(s string, c rune) int {\n\treturn Count(s)\n}\n\n// Counts the number of occurrences of a character in a string.\nfunc CountChar(s string, c rune, n int) int",
        "test_code": [
            "assert count_char(\"Python\",'o')==1",
            "assert count_char(\"little\",'t')==2",
            "assert count_char(\"assert\",'s')==2"
        ]
    },
    {
        "task_description": "Write a python function to count number of vowels in the string.",
        "generated_code": "Write a python function to count number of vowels in the string.\n\n# Example:\n\n# def count_vowels(s):\n#     return len(s) - len(s.lower())\n\n# s = \"hello\"\n# print count_vowels(s)\n\n# s = \"hello\"\n# print count_vowels(s)\n\n# s = \"hello\"\n# print count_vowels",
        "test_code": [
            "assert Check_Vow('corner','AaEeIiOoUu') == 2",
            "assert Check_Vow('valid','AaEeIiOoUu') == 2",
            "assert Check_Vow('true','AaEeIiOoUu') ==2"
        ]
    },
    {
        "task_description": "Write a python function to replace multiple occurence of character by single.",
        "generated_code": "Write a python function to replace multiple occurence of character by single.\n\n# Example\n\n# def replace_char(s, c):\n#     return s.replace(c, ' ')\n\n# replace_char('a', 'A')\n# replace_char('a', 'A')\n# replace_char('a', 'A')\n\n# replace_char('a', 'A')\n# replace_char('a', 'A",
        "test_code": [
            "assert replace('peep','e') == 'pep'",
            "assert replace('Greek','e') == 'Grek'",
            "assert replace('Moon','o') == 'Mon'"
        ]
    },
    {
        "task_description": "Write a function to check whether the given ip address is valid or not using regex.",
        "generated_code": "Write a function to check whether the given ip address is valid or not using regex.\nfunc IsValidIP(ip string) bool {\n\treturn regexp.MustCompile(`^` + ip + `$`).MatchString(ip)\n}\n\n// IsValidIPv4 returns true if the given ip address is a valid IPv4 address.\nfunc IsValidIPv4(ip string) bool {\n\treturn IsValidIP(ip) &&",
        "test_code": [
            "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
            "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
            "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
        ]
    },
    {
        "task_description": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
        "generated_code": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n#\n# The function returns a boolean value.\n#\n# Example:\n#\n#     def is_decreasing(numbers):\n#         return numbers[0] > numbers[-1]\n#\n#     print(is_decreasing(range(1, 10)))\n#\n#     # Output: True\n#     #\n#     #",
        "test_code": [
            "assert decreasing_trend([-4,-3,-2,-1]) == True",
            "assert decreasing_trend([1,2,3]) == True",
            "assert decreasing_trend([3,2,1]) == False"
        ]
    },
    {
        "task_description": "Write a python function to set the right most unset bit.",
        "generated_code": "Write a python function to set the right most unset bit.\n    \"\"\"\n    def set_bit(self, bit):\n        \"\"\"\n        Set the bit at the given position.\n        \"\"\"\n        self.bits[bit] = 1\n        return self\n\n    def get_bit(self, bit):\n        \"\"\"\n        Get the bit at the given position.\n        \"\"\"\n        return self.bits[bit]\n\n    def clear_bit(",
        "test_code": [
            "assert set_Right_most_Unset_Bit(21) == 23",
            "assert set_Right_most_Unset_Bit(11) == 15",
            "assert set_Right_most_Unset_Bit(15) == 15"
        ]
    },
    {
        "task_description": "Write a function to find maximum of three numbers.",
        "generated_code": "Write a function to find maximum of three numbers.\nfunc max3(nums ...int) int {\n\tif len(nums) < 3 {\n\t\treturn nums[0]\n\t}\n\treturn nums[0] + nums[1] + nums[2]\n}\n\n// max3 returns the maximum of three numbers in the given slice.\nfunc max3(nums []int) int {\n\tif len(n",
        "test_code": [
            "assert max_of_three(10,20,30)==30",
            "assert max_of_three(55,47,39)==55",
            "assert max_of_three(10,49,30)==49"
        ]
    },
    {
        "task_description": "Write a python function to convert a list of multiple integers into a single integer.",
        "generated_code": "Write a python function to convert a list of multiple integers into a single integer.\n\n# Example:\n\n# >>> list_to_integer(['1', '2', '3'])\n# 1\n# >>> list_to_integer(['1', '2', '3'], ',')\n# 2\n# >>> list_to_integer(['1', '2', '3'], ',')\n# 3\n# >>> list_to",
        "test_code": [
            "assert convert([1,2,3]) == 123",
            "assert convert([4,5,6]) == 456",
            "assert convert([7,8,9]) == 789"
        ]
    },
    {
        "task_description": "Write a function to remove duplicate words from a given string using collections module.",
        "generated_code": "Write a function to remove duplicate words from a given string using collections module.\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        string result;\n        string temp;\n        int i = 0;\n        int j = 0;\n        int k = 0;",
        "test_code": [
            "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
        ]
    },
    {
        "task_description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
        "generated_code": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\nfunc Add(a, b int) int {\n\treturn a + b\n}\n\n// Add2 adds two integers and returns the sum.\nfunc Add2(a, b int) int {\n\treturn a + b\n}\n\n// Add3 adds three integers and returns the sum.\nfunc Add3(a, b, c int)",
        "test_code": [
            "assert sum_nums(2,10,11,20)==20",
            "assert sum_nums(15,17,1,10)==32",
            "assert sum_nums(10,15,5,30)==20"
        ]
    },
    {
        "task_description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
        "generated_code": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\nfunc removeAll(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// RemoveAll removes all characters except alphanumeric characters from the given string by using regex.\nfunc RemoveAll(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n",
        "test_code": [
            "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
            "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
            "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
        ]
    },
    {
        "task_description": "Write a function to check if the triangle is valid or not.",
        "generated_code": "Write a function to check if the triangle is valid or not.\nfunc (t *Triangle) Check() bool {\n\treturn t.IsValid()\n}\n\n// IsValid returns true if the triangle is valid.\nfunc (t *Triangle) IsValid() bool {\n\treturn t.A.IsValid() && t.B.IsValid() && t.C.IsValid()\n}\n\n// Triangle returns a new triangle with the same",
        "test_code": [
            "assert validity_triangle(60,50,90)==False",
            "assert validity_triangle(45,75,60)==True",
            "assert validity_triangle(30,50,100)==True"
        ]
    },
    {
        "task_description": "Write a python function to remove spaces from a given string.",
        "generated_code": "Write a python function to remove spaces from a given string.\n\n>>> def remove_spaces(s):\n...     return s.replace(' ', '').replace('\\t', '').replace('\\n', '').replace('\\r', '')\n\n>>> remove_spaces('abcdefghijklmnopqrstuvwxyz')\n'abcdefghijklmnopqrstuvwxyz'\n\n>>> remove_",
        "test_code": [
            "assert remove_spaces(\"a b c\") == \"abc\"",
            "assert remove_spaces(\"1 2 3\") == \"123\"",
            "assert remove_spaces(\" b c\") == \"bc\""
        ]
    },
    {
        "task_description": "Write a function to access dictionary key\u2019s element by index.",
        "generated_code": "Write a function to access dictionary key\u2019s element by index.\n    \"\"\"\n    def __init__(self, key):\n        self.key = key\n        self.value = None\n\n    def __getitem__(self, index):\n        return self.value\n\n    def __setitem__(self, index, value):\n        self.value = value\n\n    def __delitem__(self, index):\n        del self.value\n\n",
        "test_code": [
            "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
            "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
            "assert access_key({'program':15,'computer':45},1)== 'computer'"
        ]
    },
    {
        "task_description": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
        "generated_code": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\n#\n# The function returns a boolean value.\n#\n# Example:\n#\n#     def is_increasing(numbers):\n#         return (numbers[0] > numbers[1])\n#\n#     is_increasing(range(1, 10))\n#\n#     is_increasing(range(1, 10, 2))\n#\n#     ",
        "test_code": [
            "assert increasing_trend([1,2,3,4]) == True",
            "assert increasing_trend([4,3,2,1]) == False",
            "assert increasing_trend([0,1,4,9]) == True"
        ]
    },
    {
        "task_description": "Write a python function to find the smallest prime divisor of a number.",
        "generated_code": "Write a python function to find the smallest prime divisor of a number.\n\n# Note:\n# The function is not guaranteed to be unique.\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Example 1:\n\n# Input: n = 3\n# Output: 2\n# Explanation: The smallest prime divisor of n is 2.\n\n# Example 2:\n\n# Input: n",
        "test_code": [
            "assert smallest_Divisor(10) == 2",
            "assert smallest_Divisor(25) == 5",
            "assert smallest_Divisor(31) == 31"
        ]
    },
    {
        "task_description": "Write a function to multiply two lists using map and lambda function.",
        "generated_code": "Write a function to multiply two lists using map and lambda function.\n\n#include <iostream>\n#include <map>\n#include <list>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> threeSum(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        map",
        "test_code": [
            "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
            "assert mul_list([1,2],[3,4])==[3,8]",
            "assert mul_list([90,120],[50,70])==[4500,8400]"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
        "generated_code": "Write a python function to check whether the given number can be represented by sum of two squares or not.\n#\n# Example:\n#\n#     def check_sum_of_two_squares(n):\n#         if n == 0:\n#             return True\n#         else:\n#             return False\n#\n# Returns True if the given number can be represented by sum of two squares, False otherwise.\n#\n# Note:\n#\n",
        "test_code": [
            "assert sum_Square(25) == True",
            "assert sum_Square(24) == False",
            "assert sum_Square(17) == True"
        ]
    },
    {
        "task_description": "Write a python function to count occurences of a character in a repeated string.",
        "generated_code": "Write a python function to count occurences of a character in a repeated string.\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint count_repeated_char(const string &s, char c) {\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s",
        "test_code": [
            "assert count_Char(\"abcac\",'a') == 4",
            "assert count_Char(\"abca\",'c') == 2",
            "assert count_Char(\"aba\",'a') == 7"
        ]
    },
    {
        "task_description": "Write a python function to find sum of prime numbers between 1 to n.",
        "generated_code": "Write a python function to find sum of prime numbers between 1 to n.\n\n# Definition for a  binary tree node\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n",
        "test_code": [
            "assert sum_Of_Primes(10) == 17",
            "assert sum_Of_Primes(20) == 77",
            "assert sum_Of_Primes(5) == 10"
        ]
    },
    {
        "task_description": "Write a function to find the frequency of each element in the given list.",
        "generated_code": "Write a function to find the frequency of each element in the given list.\nfunc (l *List) Frequency(list []int) {\n\tl.mutex.Lock()\n\tdefer l.mutex.Unlock()\n\tl.freq = make(map[int]int)\n\tfor _, v := range list {\n\t\tl.freq[v] = l.freq[v] + 1\n\t}\n}\n",
        "test_code": [
            "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
            "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
            "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
        ]
    },
    {
        "task_description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
        "generated_code": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def gcd(self, x, y):\n        \"\"\"\n",
        "test_code": [
            "assert recur_gcd(12,14) == 2",
            "assert recur_gcd(13,17) == 1",
            "assert recur_gcd(9, 3) == 3"
        ]
    },
    {
        "task_description": "Write a function to get the length of a complex number.",
        "generated_code": "Write a function to get the length of a complex number.\nfunc GetComplexLength(complexNumber complex.Complex) (int, error) {\n\treturn complexNumber.Length()\n}\n\n// GetComplexString returns the string representation of a complex number.\nfunc GetComplexString(complexNumber complex.Complex) (string, error) {\n\treturn complexNumber.String()\n}\n\n// GetComplexReal returns the real part of",
        "test_code": [
            "assert len_complex(3,4)==5.0",
            "assert len_complex(9,10)==13.45362404707371",
            "assert len_complex(7,9)==11.40175425099138"
        ]
    },
    {
        "task_description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
        "generated_code": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > indented block > ind",
        "test_code": [
            "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
            "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
            "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
        ]
    },
    {
        "task_description": "Write a function to multiply consecutive numbers of a given list.",
        "generated_code": "Write a function to multiply consecutive numbers of a given list.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def multiplyList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:",
        "test_code": [
            "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
            "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
            "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
        ]
    },
    {
        "task_description": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
        "generated_code": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\n>>> def group(tuple_list):\n...     return tuple(tuple(tuple_list[0]) + tuple(tuple_list[1]))\n\n>>> group([1, 2, 3])\n(1, 2, 3)\n\n>>> group([1, 2, 3, 4])\n(1, 2, 3,",
        "test_code": [
            "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
            "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
            "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
        ]
    },
    {
        "task_description": "Write a python function to find the last two digits in factorial of a given number.",
        "generated_code": "Write a python function to find the last two digits in factorial of a given number.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findLastTwoDigits(self, n):\n        \"\"\"\n        :type n",
        "test_code": [
            "assert last_Two_Digits(7) == 40",
            "assert last_Two_Digits(5) == 20",
            "assert last_Two_Digits(2) == 2"
        ]
    },
    {
        "task_description": "Write a function to remove multiple spaces in a string by using regex.",
        "generated_code": "Write a function to remove multiple spaces in a string by using regex.\nfunc removeSpaces(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// removeSpacesRegex is a regex that removes spaces from a string.\nvar removeSpacesRegex = regexp.MustCompile(`[^\\s]`)\n\n// removeSpaces returns a string with all spaces removed.\n",
        "test_code": [
            "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
            "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
            "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
        ]
    },
    {
        "task_description": "Write a function to extract unique values from the given dictionary values.",
        "generated_code": "Write a function to extract unique values from the given dictionary values.\nfunc ExtractUniqueValues(dictionary map[string]interface{}) map[string]interface{} {\n\tuniqueValues := make(map[string]interface{})\n\tfor k, v := range dictionary {\n\t\tif _, ok := uniqueValues[k]; !ok {\n\t\t\tuniqueValues[k] = v\n\t\t}\n\t}\n\treturn uniqueValues\n}\n\n//",
        "test_code": [
            "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
            "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
            "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
        ]
    },
    {
        "task_description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
        "generated_code": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n#\n# The function should return True if the first tuple is greater than the second tuple, and False otherwise.\n#\n# Example:\n#\n# Input:\n#\n# (1, 2, 3)\n# (4, 5, 6)\n# (7, 8, 9)\n#\n# Output:\n#\n# True\n",
        "test_code": [
            "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
            "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
            "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
        ]
    },
    {
        "task_description": "Write a function to zip two given lists of lists.",
        "generated_code": "Write a function to zip two given lists of lists.\nfunc zip(lists ...[]int) []int {\n\tvar result []int\n\tfor _, list := range lists {\n\t\tresult = append(result, list...)\n\t}\n\treturn result\n}\n\n// zip2 is a helper function to zip two given lists of lists.\nfunc zip2(lists ...[]int) []int {\n\tvar result []int\n\tfor _, list",
        "test_code": [
            "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
            "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
            "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
        ]
    },
    {
        "task_description": "Write a function to find number of even elements in the given list using lambda function.",
        "generated_code": "Write a function to find number of even elements in the given list using lambda function.\nfunc Even(list []int) int {\n\tif len(list) == 0 {\n\t\treturn 0\n\t}\n\treturn list[len(list)/2] % 2\n}\n\n// Even returns the number of even elements in the given list.\nfunc Even(list []int) int {\n\treturn len(list) / 2\n}\n\n// Even returns",
        "test_code": [
            "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
            "assert count_even([10,15,14,13,-18,12,-20])==5",
            "assert count_even([1, 2, 4, 8, 9])==3"
        ]
    },
    {
        "task_description": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
        "generated_code": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def sortTuple(self, dict):\n        \"\"\"\n        :type dict",
        "test_code": [
            "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
            "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
            "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
        ]
    },
    {
        "task_description": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
        "generated_code": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\n\n# Input:\n# 1. A binary string\n# 2. A binary string\n# 3. A binary string\n# 4. A binary string\n# 5. A binary string\n# 6. A binary string\n# 7. A binary string\n# 8. A binary string\n# 9. A binary string\n# 10. A binary string\n# 11. A",
        "test_code": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
            "assert min_Swaps(\"1110000\",\"0001101\") == 3"
        ]
    },
    {
        "task_description": "Write a function to count the number of elements in a list which are within a specific range.",
        "generated_code": "Write a function to count the number of elements in a list which are within a specific range.\nfunc Count(list []int) int {\n\tvar count int\n\tfor _, v := range list {\n\t\tif v >= 0 && v <= 100 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// Counts the number of elements in a list which are within a specific range.\nfunc CountRange(list []int, start",
        "test_code": [
            "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
            "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
            "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
        ]
    },
    {
        "task_description": "Write a function to find the equilibrium index of the given array.",
        "generated_code": "Write a function to find the equilibrium index of the given array.\nfunc FindEquilibrium(arr []int) int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\tvar index int\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] == arr[i+1] {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn index\n}\n\n",
        "test_code": [
            "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
            "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
            "assert equilibrium_index([1, 2, 3]) == -1"
        ]
    },
    {
        "task_description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
        "generated_code": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\nInput:\n\nThe first line contains a list of integers.\nThe second line contains a list of integers.\nThe third line contains a list of integers.\nThe fourth line contains a list of integers.\nThe fifth line contains a list of integers.\nThe sixth line contains a list of integers.\nThe seventh line contains a list of integers.\n",
        "test_code": [
            "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
            "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
            "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
        ]
    },
    {
        "task_description": "Write a function to check whether the given key is present in the dictionary or not.",
        "generated_code": "Write a function to check whether the given key is present in the dictionary or not.\nfunc (d *Dictionary) Has(key string) bool {\n\treturn d.HasKey(key)\n}\n\n// HasKey returns true if the given key is present in the dictionary.\nfunc (d *Dictionary) HasKey(key string) bool {\n\tif d.dict == nil {\n\t\treturn false\n\t}\n\treturn d.dict.",
        "test_code": [
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
        ]
    },
    {
        "task_description": "Write a function to calculate the harmonic sum of n-1.",
        "generated_code": "Write a function to calculate the harmonic sum of n-1.\nfunc harmonicSum(n int) float64 {\n\tsum := 0.0\n\tfor i := 0; i < n; i++ {\n\t\tsum += math.Pow(float64(i), float64(n-1))\n\t}\n\treturn sum\n}\n\n// harmonicSum2 calculates the harmonic sum of n-1.\nfunc harmonicSum2(n int) float",
        "test_code": [
            "assert harmonic_sum(10)==2.9289682539682538",
            "assert harmonic_sum(4)==2.083333333333333",
            "assert harmonic_sum(7)==2.5928571428571425 "
        ]
    },
    {
        "task_description": "Write a function to sort a list of lists by length and value.",
        "generated_code": "Write a function to sort a list of lists by length and value.\nfunc SortByLength(lists []*List) {\n\tfor i := 0; i < len(lists); i++ {\n\t\tlists[i].SortByLength()\n\t}\n}\n\n// SortByValue sorts a list by value.\nfunc SortByValue(lists []*List) {\n\tfor i := 0; i < len(lists); i++ {\n\t\tlists",
        "test_code": [
            "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
            "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
            "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
        ]
    },
    {
        "task_description": "Write a function to find whether an array is subset of another array.",
        "generated_code": "Write a function to find whether an array is subset of another array.\nfunc isSubset(a []int, b []int) bool {\n\tfor i := range a {\n\t\tif a[i] < b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// isSubset2 checks whether two arrays are subset of each other.\nfunc isSubset2(a []int, b []int) bool",
        "test_code": [
            "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
            "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
            "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
        ]
    },
    {
        "task_description": "Write a python function to count the total set bits from 1 to n.",
        "generated_code": "Write a python function to count the total set bits from 1 to n.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countSetBits(self, root):\n        \"\"\"\n        :type root: TreeNode\n",
        "test_code": [
            "assert count_Set_Bits(16) == 33",
            "assert count_Set_Bits(2) == 2",
            "assert count_Set_Bits(14) == 28"
        ]
    },
    {
        "task_description": "Write a python function to convert a string to a list.",
        "generated_code": "Write a python function to convert a string to a list.\n\n>>> def to_list(s):\n...     return [s]\n\n>>> to_list('hello')\n['hello']\n\n>>> to_list('hello, world')\n['hello', 'world']\n\n>>> to_list('hello, world, goodbye')\n['hello', 'world', 'goodbye']\n\n>>> to_list('hello, world, goodbye, hello')\n",
        "test_code": [
            "assert Convert('python program') == ['python','program']",
            "assert Convert('Data Analysis') ==['Data','Analysis']",
            "assert Convert('Hadoop Training') == ['Hadoop','Training']"
        ]
    },
    {
        "task_description": "Write a function to count unique keys for each value present in the tuple.",
        "generated_code": "Write a function to count unique keys for each value present in the tuple.\nfunc (t *Tuple) CountUniqueKeys(v interface{}) int {\n\tif t.IsEmpty() {\n\t\treturn 0\n\t}\n\treturn t.CountUniqueKeys(v.([]interface{}))\n}\n\n// CountUniqueKeys returns the number of unique keys in the tuple.\nfunc (t *Tuple) CountUniqueKeys(v []interface{})",
        "test_code": [
            "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
            "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
            "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
        ]
    },
    {
        "task_description": "Write a function to access the initial and last data of the given tuple record.",
        "generated_code": "Write a function to access the initial and last data of the given tuple record.\nfunc (r *Record) GetInitialAndLastData(tupleRecord *TupleRecord) (initial, lastData []byte) {\n\tif r.Initial == nil {\n\t\tinitial = nil\n\t} else {\n\t\tinitial = r.Initial.GetData()\n\t}\n\tif r.Last == nil {\n\t\tlastData = nil\n\t} else {\n",
        "test_code": [
            "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
            "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
            "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
        ]
    },
    {
        "task_description": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
        "generated_code": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\n# Example 1:\n\n# Input:\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14\n# 15\n# 16\n# 17\n# 18\n# 19\n# 20\n# 21\n#",
        "test_code": [
            "assert product_Equal(2841) == True",
            "assert product_Equal(1234) == False",
            "assert product_Equal(1212) == False"
        ]
    },
    {
        "task_description": "Write a function to remove duplicates from a list of lists.",
        "generated_code": "Write a function to remove duplicates from a list of lists.\nfunc RemoveDuplicates(lists []*List) []*List {\n\tif len(lists) == 0 {\n\t\treturn nil\n\t}\n\n\tvar result []*List\n\tfor _, list := range lists {\n\t\tif len(list.Items) == 1 {\n\t\t\tresult = append(result, list)\n\t\t} else {\n\t\t\tresult = append(result, list)",
        "test_code": [
            "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
            "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
            "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
        ]
    },
    {
        "task_description": "Write a function to check if the given tuple contains all valid values or not.",
        "generated_code": "Write a function to check if the given tuple contains all valid values or not.\nfunc CheckTuple(tuple interface{}, valid bool) bool {\n\tif tuple == nil {\n\t\treturn valid\n\t}\n\n\tfor _, v := range tuple.([]interface{}) {\n\t\tif !CheckTuple(v, valid) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n// CheckTupleString checks if the",
        "test_code": [
            "assert check_valid((True, True, True, True) ) == True",
            "assert check_valid((True, False, True, True) ) == False",
            "assert check_valid((True, True, True, True) ) == True"
        ]
    },
    {
        "task_description": "Write a python function to count the number of distinct power of prime factor of given number.",
        "generated_code": "Write a python function to count the number of distinct power of prime factor of given number.\n\n# Example\n\n# Given n = 3, return n!.\n#\n# Note:\n# You may assume that n is always prime.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self",
        "test_code": [
            "assert count_Fac(24) == 3",
            "assert count_Fac(12) == 2",
            "assert count_Fac(4) == 1"
        ]
    },
    {
        "task_description": "Write a function to convert the given string of integers into a tuple.",
        "generated_code": "Write a function to convert the given string of integers into a tuple.\n\n>>> def to_tuple(s):\n...     return tuple(int(x) for x in s.split())\n\n>>> to_tuple('1,2,3')\n(1, 2, 3)\n\n>>> to_tuple('1,2,3,4')\n(1, 2, 3, 4)\n\n>>> to_tuple('1,",
        "test_code": [
            "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
            "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
            "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
        ]
    },
    {
        "task_description": "Write a function to find the perimeter of a rombus.",
        "generated_code": "Write a function to find the perimeter of a rombus.\nfunc FindRombus(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn FindRombus(n - 1) + FindRombus(n - 2)\n}\n\n// FindRombus finds the perimeter of a rombus.\nfunc FindRombus(",
        "test_code": [
            "assert rombus_perimeter(10)==40",
            "assert rombus_perimeter(5)==20",
            "assert rombus_perimeter(4)==16"
        ]
    },
    {
        "task_description": "Write a function to calculate the standard deviation.",
        "generated_code": "Write a function to calculate the standard deviation.\nfunc (s *Stats) StandardDeviation(name string) func([]float64) float64 {\n\treturn func(values []float64) float64 {\n\t\tif len(values) == 0 {\n\t\t\treturn 0\n\t\t}\n\t\treturn math.Sqrt(s.StandardDeviation(name, values))\n\t}\n}\n\n// StandardDeviation calculates the standard deviation of the given values",
        "test_code": [
            "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
            "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
            "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
        ]
    },
    {
        "task_description": "Write a function to create a list taking alternate elements from another given list.",
        "generated_code": "Write a function to create a list taking alternate elements from another given list.\nfunc (l *List) Create(other *List) *List {\n\tif other == nil {\n\t\treturn l\n\t}\n\tif other.Len() == 0 {\n\t\treturn l\n\t}\n\tl.Swap(other)\n\treturn l\n}\n\n// Swap swaps the elements of the list.\nfunc (l *List) Swap(other *List",
        "test_code": [
            "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
            "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
            "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an a followed by zero or more b's.",
        "generated_code": "Write a function that matches a string that has an a followed by zero or more b's.\nfunc (f *Function) Match(s string) *Function {\n\tif len(s) == 0 {\n\t\treturn f\n\t}\n\tif s[0] == 'a' {\n\t\treturn f.Match(s[1:])\n\t}\n\treturn f.Match(s[1:])\n}\n\n// MatchString returns a function",
        "test_code": [
            "assert text_match(\"ac\")==('Found a match!')",
            "assert text_match(\"dc\")==('Not matched!')",
            "assert text_match(\"abba\")==('Found a match!')"
        ]
    },
    {
        "task_description": "Write a function to add a dictionary to the tuple.",
        "generated_code": "Write a function to add a dictionary to the tuple.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.dict = kwargs.pop('dict', None)\n        super(Tuple, self).__init__(*args, **kwargs)\n\n    def __getitem__(self, key):\n        if self.dict is None:\n            return super(Tuple, self).__getitem__",
        "test_code": [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ]
    },
    {
        "task_description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
        "generated_code": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\nInput:\n\nThe matrix is given as a list of lists of integers.\n\nOutput:\n\nThe path is given as a list of lists of integers.\n\nConstraints:\n\nThe matrix is not empty.\n\nExample:\n\nInput:\n\n[[1,2,3],[4,5,6],[7",
        "test_code": [
            "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
            "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
            "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
        ]
    },
    {
        "task_description": "Write a function to filter the height and width of students which are stored in a dictionary.",
        "generated_code": "Write a function to filter the height and width of students which are stored in a dictionary.\n#\n# The function takes a dictionary of students and returns a list of students which are stored in the dictionary.\n#\n# The function is called with the dictionary as the first argument and the student as the second argument.\n#\n# The function returns a list of students which are stored in the dictionary.\n#\n# The function returns a list of students which are stored in the dictionary",
        "test_code": [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ]
    },
    {
        "task_description": "Write a function to count the same pair in two given lists using map function.",
        "generated_code": "Write a function to count the same pair in two given lists using map function.\nfunc CountSame(lists1 []int, lists2 []int) int {\n\tvar count int\n\tfor _, l1 := range lists1 {\n\t\tfor _, l2 := range lists2 {\n\t\t\tif l1 == l2 {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n// CountSame2 counts the same pair",
        "test_code": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
        ]
    },
    {
        "task_description": "Write a function to calculate the sum of all digits of the base to the specified power.",
        "generated_code": "Write a function to calculate the sum of all digits of the base to the specified power.\nfunc (f *Fraction) SumDigits(base int) int {\n\tif base < 2 {\n\t\treturn 0\n\t}\n\treturn f.Digits(base)\n}\n\n// SumDigits returns the sum of all digits of the base to the specified power.\nfunc (f *Fraction) SumDigits(base int) int {\n\t",
        "test_code": [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62"
        ]
    },
    {
        "task_description": "Write a function to extract values between quotation marks of the given string by using regex.",
        "generated_code": "Write a function to extract values between quotation marks of the given string by using regex.\nfunc ExtractQuotes(s string) string {\n\treturn strings.Replace(s, \"\\\"\", \"\\\\\\\"\", -1)\n}\n\n// ExtractQuotes returns the string with the first occurrence of the given string,\n// or the empty string if the string is not found.\nfunc ExtractQuotes(s string) string {\n\treturn strings.Replace(s, \"",
        "test_code": [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
        ]
    },
    {
        "task_description": "Write a function to multiply the adjacent elements of the given tuple.",
        "generated_code": "Write a function to multiply the adjacent elements of the given tuple.\nfunc (t *Tuple) Multiply(x, y *Tuple) {\n\tt.X = x\n\tt.Y = y\n}\n\n// Add adds the given tuple to the tuple.\nfunc (t *Tuple) Add(x, y *Tuple) {\n\tt.X = x\n\tt.Y = y\n}\n\n// Sub subtract",
        "test_code": [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
        ]
    },
    {
        "task_description": "Write a function to remove all characters except letters and numbers using regex",
        "generated_code": "Write a function to remove all characters except letters and numbers using regexp.\nfunc removeAll(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// Remove all characters except letters and numbers using regexp.\nfunc removeAllLower(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// Remove all characters except letters and numbers using regex",
        "test_code": [
            "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
            "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
            "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
        ]
    },
    {
        "task_description": "Write a function to sum elements in two lists.",
        "generated_code": "Write a function to sum elements in two lists.\nfunc Sum(l1, l2 []int) int {\n\tvar sum int\n\tfor _, v := range l1 {\n\t\tsum += v\n\t}\n\tfor _, v := range l2 {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n// Sum2 returns the sum of the two lists.\nfunc Sum2(l1, l2 []int) int",
        "test_code": [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ]
    },
    {
        "task_description": "Write a function to add two lists using map and lambda function.",
        "generated_code": "Write a function to add two lists using map and lambda function.\nfunc Add(l1, l2 []int) []int {\n\tvar result []int\n\tfor _, v := range l1 {\n\t\tresult = append(result, v)\n\t}\n\tfor _, v := range l2 {\n\t\tresult = append(result, v)\n\t}\n\treturn result\n}\n\n// Add2 adds two lists using map and lambda",
        "test_code": [
            "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
            "assert add_list([1,2],[3,4])==[4,6]",
            "assert add_list([10,20],[50,70])==[60,90]"
        ]
    },
    {
        "task_description": "Write a function to remove consecutive duplicates of a given list.",
        "generated_code": "Write a function to remove consecutive duplicates of a given list.\nfunc RemoveDuplicates(list []string) []string {\n\tif len(list) == 0 {\n\t\treturn list\n\t}\n\tvar result []string\n\tfor i := 0; i < len(list)-1; i++ {\n\t\tif list[i] == list[i+1] {\n\t\t\tresult = append(result, list[i+1])\n\t\t}",
        "test_code": [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
        ]
    },
    {
        "task_description": "Write a function to find the lateral surface area of a cone.",
        "generated_code": "Write a function to find the lateral surface area of a cone.\nfunc FindLateralSurfaceArea(surfaceArea float64) float64 {\n\treturn surfaceArea * surfaceArea\n}\n\n// FindLateralSurfaceArea returns the lateral surface area of a cone.\nfunc FindLateralSurfaceArea(surfaceArea float64, cone *Cone) float64 {\n\treturn surfaceArea * cone.Area\n}\n\n// FindLateralSurfaceArea",
        "test_code": [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ]
    },
    {
        "task_description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "generated_code": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replaceSpaces(s string) string {\n\treturn strings.Replace(s, \" \", \":\", -1)\n}\n\n// replaceComma replaces all occurrences of commas with a comma.\nfunc replaceComma(s string) string {\n\treturn strings.Replace(s, \",\", \",\", -1)\n}\n\n",
        "test_code": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ]
    },
    {
        "task_description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "Write a function to find the index of the first occurrence of a given number in a sorted array.\n\nInput:\n\nThe first number is a number from 1 to 100.\n\nOutput:\n\nThe index of the first occurrence of the first number in the sorted array.\n\nConstraints:\n\n1 <= number <= 100\n\nInput Format:\n\nThe first number is a number from 1 to 100.\n\nOutput Format:\n\nThe index of the",
        "test_code": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ]
    },
    {
        "task_description": "Write a python function to find sum of products of all possible subarrays.",
        "generated_code": "Write a python function to find sum of products of all possible subarrays.\n\n# Input\n\n# 1. Input array of size N\n# 2. Input array of size M\n# 3. Input array of size N\n# 4. Input array of size M\n# 5. Input array of size N\n# 6. Input array of size M\n# 7. Input array of size N\n# 8. Input array of size M\n# 9. Input array of",
        "test_code": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "task_description": "Write a python function to toggle bits of the number except the first and the last bit.",
        "generated_code": "Write a python function to toggle bits of the number except the first and the last bit.\n\n# Example:\n# >>> print(toggle_bits(5, 3))\n# True\n# >>> print(toggle_bits(5, 3, True))\n# True\n# >>> print(toggle_bits(5, 3, False))\n# False\n\n# Input:\n# 5\n# 3\n# True\n# False\n\n# Output:\n# True",
        "test_code": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "task_description": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "generated_code": "Write a function to locate the left insertion point for a specified value in sorted order.\nfunc Insert(s []int, x int) int {\n\tif len(s) == 0 {\n\t\treturn 0\n\t}\n\tif x < s[0] {\n\t\treturn s[0]\n\t}\n\tif x > s[len(s)-1] {\n\t\treturn s[len(s)-1]\n\t}\n\treturn s[",
        "test_code": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ]
    },
    {
        "task_description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc IsVowel(s string) bool {\n\treturn strings.HasPrefix(s, \"a\") || strings.HasPrefix(s, \"e\") || strings.HasPrefix(s, \"i\") || strings.HasPrefix(s, \"o\") || strings.HasPrefix(s, \"u\")\n}\n\n// IsV",
        "test_code": [
            "assert check_str(\"annie\") == 'Valid'",
            "assert check_str(\"dawood\") == 'Invalid'",
            "assert check_str(\"Else\") == 'Valid'"
        ]
    },
    {
        "task_description": "Write a function to calculate the geometric sum of n-1.",
        "generated_code": "Write a function to calculate the geometric sum of n-1.\nfunc geometricSum(n int) int {\n\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n// A function to calculate the geometric mean of n-1.\nfunc geometricMean(n int) int {\n\treturn geometricSum(n) / n\n}\n\n// A function to",
        "test_code": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ]
    },
    {
        "task_description": "Write a python function to find the index of smallest triangular number with n digits.",
        "generated_code": "Write a python function to find the index of smallest triangular number with n digits.\n\n# Input:\n# n: number of digits\n#\n# Output:\n# index of smallest triangular number with n digits\n#\n# Explanation:\n# The smallest triangular number with n digits is the smallest number with the smallest number of digits.\n#\n# Example 1:\n# Input:\n# n = 3\n# Output:\n# 1\n# Explanation:\n",
        "test_code": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ]
    },
    {
        "task_description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "generated_code": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n>>> def convert_tuple_to_dict(tuple):\n...     return {key: value for key, value in tuple}\n\n>>> convert_tuple_to_dict([(1, 2), (3, 4)])\n{1: 2, 3: 4}\n\n>>> convert_tuple_to_dict([(1, 2), (",
        "test_code": [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ]
    },
    {
        "task_description": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "Write a python function to check whether all the characters are same or not.\ndef check_characters(string):\n    if string == \"\":\n        return True\n    else:\n        return False\n\n# This function will check if the string is a valid python function.\ndef check_function(string):\n    if string == \"\":\n        return True\n    else:\n        return False\n\n# This function will check if the string is a valid python",
        "test_code": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ]
    },
    {
        "task_description": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "Write a function to caluclate the area of a tetrahedron.\nfunc CalcTetrahedronArea(tetrahedron *Tetrahedron) float64 {\n\treturn float64(tetrahedron.Area())\n}\n\n// CalcTetrahedronVolume calculates the volume of a tetrahedron.\nfunc CalcTetrahedronVolume(tetrahedron *Tetrahed",
        "test_code": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ]
    },
    {
        "task_description": "Write a function to rotate a given list by specified number of items to the right direction.",
        "generated_code": "Write a function to rotate a given list by specified number of items to the right direction.\nfunc RotateRight(list []int, n int) []int {\n\tif len(list) == 0 {\n\t\treturn list\n\t}\n\tif n == 0 {\n\t\treturn list\n\t}\n\tif n > len(list) {\n\t\tn = len(list)\n\t}\n\tfor i := 0; i < n; i++ {",
        "test_code": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        ]
    },
    {
        "task_description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "Write a function to check if the given tuple has any none value or not.\nfunc CheckIfNone(tuple interface{}) bool {\n\tif tuple == nil {\n\t\treturn true\n\t}\n\tif _, ok := tuple.([]interface{}); !ok {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// CheckIfEmpty checks if the given tuple is empty.\nfunc CheckIfEmpty(tuple interface{}) bool {\n",
        "test_code": [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ]
    },
    {
        "task_description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
        "generated_code": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n\nInput:\n\nThe range is [1, 10].\n\nOutput:\n\nThe function returns the number of the first number in the range.\n\nConstraints:\n\n1 <= range <= 10\n\nExample:\n\nInput:\n\nrange = [1, 10]\n\nOutput:\n\n3\n\nConstraints:\n\n",
        "test_code": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ]
    },
    {
        "task_description": "Write a function to find area of a sector.",
        "generated_code": "Write a function to find area of a sector.\nfunc (m *sectorMap) Find(sector uint64) (uint64, error) {\n\tm.Lock()\n\tdefer m.Unlock()\n\n\tif m.sectorMap == nil {\n\t\treturn 0, errors.New(\"sectorMap is nil\")\n\t}\n\n\treturn m.sectorMap.Find(sector)\n}\n\n// Find returns the first sector of the given sector.",
        "test_code": [
            "assert sector_area(4,45)==6.285714285714286",
            "assert sector_area(9,45)==31.82142857142857",
            "assert sector_area(9,360)==None"
        ]
    },
    {
        "task_description": "Write a function to find the longest common subsequence for the given three string sequence.",
        "generated_code": "Write a function to find the longest common subsequence for the given three string sequence.\n\nInput:\n\nThe first line contains three strings, each separated by a space.\n\nThe second line contains three strings, each separated by a space.\n\nThe third line contains three strings, each separated by a space.\n\nOutput:\n\nThe longest common subsequence is the longest common subsequence of the three strings.\n\nConstraints:\n\n1 <= len(",
        "test_code": [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
        ]
    },
    {
        "task_description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
        "generated_code": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\nfunc Capitalize(s string) string {\n\treturn strings.ToUpper(strings.Replace(s, \" \", \"\", -1))\n}\n\n// CapitalizeWords returns a string with all words capitalized.\nfunc CapitalizeWords(s string) string {\n\treturn strings.ToUpper(strings.Replace(s, \" \", \"",
        "test_code": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ]
    },
    {
        "task_description": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "Write a function to sort a given list of strings of numbers numerically.\nfunc Sort(list []string) {\n\tsort.Sort(sort.Reverse(sort.StringSlice(list)))\n}\n\n// SortBy sorts a given list of strings by their numerical value.\nfunc SortBy(list []string) {\n\tsort.Sort(sort.Reverse(sort.StringSlice(list)))\n}\n\n// SortByN",
        "test_code": [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ]
    },
    {
        "task_description": "Write a function to add the given tuple to the given list.",
        "generated_code": "Write a function to add the given tuple to the given list.\nfunc (l *List) Add(tuple interface{}, list *List) {\n\tl.mutex.Lock()\n\tdefer l.mutex.Unlock()\n\tl.list.PushBack(tuple)\n}\n\n// Remove removes the given tuple from the given list.\nfunc (l *List) Remove(tuple interface{}) {\n\tl.mut",
        "test_code": [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ]
    },
    {
        "task_description": "Write a function to check if the given array represents min heap or not.",
        "generated_code": "Write a function to check if the given array represents min heap or not.\nfunc minHeap(arr []int) bool {\n\tif len(arr) == 0 {\n\t\treturn true\n\t}\n\tif len(arr) == 1 {\n\t\treturn arr[0] < arr[0]\n\t}\n\treturn minHeap(arr[1:])\n}\n\n// minHeap is a helper function to check if the given array represents",
        "test_code": [
            "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
        ]
    },
    {
        "task_description": "Write a function to find the nth jacobsthal number.",
        "generated_code": "Write a function to find the nth jacobsthal number.\nfunc FindNth(n int) int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn FindNth(n-1) + 1\n}\n\n// FindNth returns the nth jacobsthal number in the given array.\nfunc FindNth(n int) int",
        "test_code": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ]
    },
    {
        "task_description": "Write a function to find minimum k records from tuple list.",
        "generated_code": "Write a function to find minimum k records from tuple list.\nfunc (f *Finder) findMin(tupleList []*tuple) (int, error) {\n\tif len(tupleList) == 0 {\n\t\treturn 0, nil\n\t}\n\n\tmin := int(math.MaxInt32)\n\tfor _, t := range tupleList {\n\t\tif t.Min > min {\n\t\t\tmin = t.Min\n\t\t}",
        "test_code": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ]
    },
    {
        "task_description": "Write a function to find common index elements from three lists.",
        "generated_code": "Write a function to find common index elements from three lists.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findCommonIndex(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        int n = nums1.size();\n        int m = num",
        "test_code": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
        ]
    },
    {
        "task_description": "Write a function to find the second smallest number in a list.",
        "generated_code": "Write a function to find the second smallest number in a list.\nfunc FindSmallest(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn 0\n\t}\n\tvar smallest int\n\tfor i := 0; i < len(nums); i++ {\n\t\tif smallest == 0 || nums[i] < smallest {\n\t\t\tsmallest = nums[i]\n\t\t}\n\t}\n\treturn",
        "test_code": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an a followed by zero or one 'b'.",
        "generated_code": "Write a function that matches a string that has an a followed by zero or one 'b'.\n//\n// The function returns the number of times the string has an a followed by zero or one 'b'.\nfunc (f *Function) Match(s string) int {\n\tif len(s) == 0 {\n\t\treturn 0\n\t}\n\tif s[0] == 'b' {\n\t\treturn 1\n\t}\n\treturn 0\n}\n",
        "test_code": [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ]
    },
    {
        "task_description": "Write a function to count the pairs of reverse strings in the given string list.",
        "generated_code": "Write a function to count the pairs of reverse strings in the given string list.\nfunc CountPairs(s string) int {\n\tvar count int\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == 'R' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountPairsCount returns the number of pairs of reverse strings in the given string list.\nfunc Count",
        "test_code": [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
        ]
    },
    {
        "task_description": "Write a function to count number of unique lists within a list.",
        "generated_code": "Write a function to count number of unique lists within a list.\nfunc CountUniqueLists(lists []*List) int {\n\tvar count int\n\tfor _, list := range lists {\n\t\tif list.Len() == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountUniqueListsWithCount returns the number of unique lists within a list.\nfunc CountUniqueListsWithCount(lists []*List",
        "test_code": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
        ]
    },
    {
        "task_description": "Write a function to check a decimal with a precision of 2.",
        "generated_code": "Write a function to check a decimal with a precision of 2.\nfunc CheckDecimal(t *testing.T, f func(decimal.Decimal) bool) {\n\tt.Helper()\n\tdecimal := decimal.New(decimal.Fraction(1, 2))\n\tif !f(decimal) {\n\t\tt.Errorf(\"f(decimal) = false, want true\")\n\t}\n}\n\n// Check that",
        "test_code": [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False"
        ]
    },
    {
        "task_description": "Write a python function to check whether an array contains only one distinct element or not.",
        "generated_code": "Write a python function to check whether an array contains only one distinct element or not.\n#\n# Author:   Benjamin Bengfort <bbengfort@districtdatalabs.com>\n# Created:  Wed Mar 23 13:22:22 2016 -0500\n#\n# Copyright (C) 2016 District Data Labs\n# For license information, see LICENSE.txt\n#\n# ID: check_only_one.py [] benjamin@beng",
        "test_code": [
            "assert unique_Element([1,1,1],3) == 'YES'",
            "assert unique_Element([1,2,1,2],4) == 'NO'",
            "assert unique_Element([1,2,3,4,5],5) == 'NO'"
        ]
    },
    {
        "task_description": "Write a function to caluclate arc length of an angle.",
        "generated_code": "Write a function to caluclate arc length of an angle.\nfunc CalcArcLength(angle float64) float64 {\n\treturn math.Pi * math.Sin(angle)\n}\n\n// CalcArcLength calculates arc length of an angle.\nfunc CalcArcLength(angle float64) float64 {\n\treturn math.Pi * math.Sin(angle)\n}\n\n// CalcArcLength calculates arc length of an angle.\n",
        "test_code": [
            "assert arc_length(9,45)==3.5357142857142856",
            "assert arc_length(9,480)==None",
            "assert arc_length(5,270)==11.785714285714285"
        ]
    },
    {
        "task_description": "Write a function to check whether the given month number contains 30 days or not.",
        "generated_code": "Write a function to check whether the given month number contains 30 days or not.\nfunc Is30Days(month int) bool {\n\treturn month == 1 || month == 2 || month == 3 || month == 4 || month == 5 || month == 6 || month == 7 || month == 8 || month == 9 || month == 10 || month == 11 || month == 12\n}\n\n// Is30Days returns true if the given month number is 30 days.\nfunc Is30",
        "test_code": [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ]
    },
    {
        "task_description": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "Write a python function to find the minimum difference between any two elements in a given array.\n\nInput:\n\nThe first element is a list of integers.\nThe second element is a list of integers.\n\nOutput:\n\nThe minimum difference between the first and second element.\n\nExample:\n\nInput:\n\n[1,2,3]\n[1,2,3]\n\nOutput:\n\n3\n\nExplanation:\n\nThe",
        "test_code": [
            "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
            "assert find_Min_Diff((4,3,2,6),4) == 1",
            "assert find_Min_Diff((30,5,20,9),4) == 4"
        ]
    },
    {
        "task_description": "Write a python function to count numeric values in a given string.",
        "generated_code": "Write a python function to count numeric values in a given string.\n\nUsage:\n\npython count_numeric.py <string>\n\nThe <string> argument is a string that contains a number.\n\nThe function returns the number of the number in the string.\n\n\"\"\"\n\nimport sys\nimport re\n\ndef count_numeric(string):\n    \"\"\"\n    Count the number of the number in the string.\n\n    :param string: The",
        "test_code": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') ==1",
            "assert number_ctr('123') == 3"
        ]
    },
    {
        "task_description": "Write a function to find nth polite number.",
        "generated_code": "Write a function to find nth polite number.\nfunc FindNth(n int, f func(int) int) int {\n\tif n < 1 {\n\t\treturn 0\n\t}\n\tfor i := 1; i <= n; i++ {\n\t\tif f(i) == i {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}\n\n// FindNth2 finds the nth number in a list.\nfunc",
        "test_code": [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ]
    },
    {
        "task_description": "Write a function to iterate over all pairs of consecutive items in a given list.",
        "generated_code": "Write a function to iterate over all pairs of consecutive items in a given list.\nfunc PairIterator(list []interface{}) Iterator {\n\treturn Iterator{\n\t\tlist: list,\n\t\tnext: func() interface{} {\n\t\t\treturn list[len(list)-1]\n\t\t},\n\t}\n}\n\n// Iterator is an iterator over a list of pairs.\ntype Iterator struct {\n\tlist []interface{}\n\t",
        "test_code": [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ]
    },
    {
        "task_description": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
        "generated_code": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countPairs(self, root):\n        \"\"\"\n        :type",
        "test_code": [
            "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
            "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
            "assert get_Pairs_Count([1,-2,3],3,1) == 1"
        ]
    },
    {
        "task_description": "Write a python function to check for odd parity of a given number.",
        "generated_code": "Write a python function to check for odd parity of a given number.\n\n# Example:\n\n# >>> check_odd_parity(5)\n# True\n\n# >>> check_odd_parity(5)\n# False\n\n# >>> check_odd_parity(5)\n# False\n\n# >>> check_odd_parity(5)\n# True\n\n# >>> check_odd_parity(5)\n# False\n",
        "test_code": [
            "assert check_Odd_Parity(13) == True",
            "assert check_Odd_Parity(21) == True",
            "assert check_Odd_Parity(18) == False"
        ]
    },
    {
        "task_description": "Write a python function to get the difference between two lists.",
        "generated_code": "Write a python function to get the difference between two lists.\n\ndef get_diff(l1, l2):\n    return [x - y for x, y in zip(l1, l2)]\n\n# Get the difference between two lists of numbers.\ndef get_diff_numbers(l1, l2):\n    return [x - y for x, y in zip(l1, l2)]\n\n# Get the difference between two",
        "test_code": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n# Note:\n# 1. The function is defined as follows:\n#    sum(x**n for n in range(1, 10))\n#    where x is a list of odd numbers.\n# 2. The function is defined as follows:\n#    sum(x**n for n in range(1, 10))\n#    where x is a list of",
        "test_code": [
            "assert odd_Num_Sum(2) == 82",
            "assert odd_Num_Sum(3) == 707",
            "assert odd_Num_Sum(4) == 3108"
        ]
    },
    {
        "task_description": "Write a function to check if the given expression is balanced or not.",
        "generated_code": "Write a function to check if the given expression is balanced or not.\nfunc (e *Expression) IsBalanced(expr string) bool {\n\tif e.IsFunction(expr) {\n\t\treturn true\n\t}\n\treturn e.IsFunction(e.GetFunction(expr))\n}\n\n// IsFunction returns true if the given expression is a function.\nfunc (e *Expression) IsFunction(expr string) bool {\n\treturn",
        "test_code": [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ]
    },
    {
        "task_description": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "Write a function to remove all the words with k length in the given string.\nfunc RemoveWords(s string, k int) string {\n\tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\tvar words []string\n\tfor _, word := range s {\n\t\tif len(word) > k {\n\t\t\twords = append(words, word)\n\t\t}\n\t}\n\treturn strings.Join(words, \" \")",
        "test_code": [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ]
    },
    {
        "task_description": "Write a function to find the occurrence and position of the substrings within a string.",
        "generated_code": "Write a function to find the occurrence and position of the substrings within a string.\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findSubstring(string s, string p) {\n        int n = s.size();\n        int m = p.size();\n        if (n == 0 || m",
        "test_code": [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
        ]
    },
    {
        "task_description": "Write a function to check if the string is a valid email address or not using regex.",
        "generated_code": "Write a function to check if the string is a valid email address or not using regex.\nfunc isValidEmail(email string) bool {\n\treturn regexp.MustCompile(`^[a-z0-9!#$%&'*+\\-\\/=?^_`{|}~]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(?<![",
        "test_code": [
            "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
            "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
            "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
        ]
    },
    {
        "task_description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: Tree",
        "test_code": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ]
    },
    {
        "task_description": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "generated_code": "Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc countVowels(s string) int {\n\tvar count int\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' {\n\t\t\tcount++\n\t\t}\n\t",
        "test_code": [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of non-repeated elements in a given array.",
        "generated_code": "Write a python function to find the sum of non-repeated elements in a given array.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findSum(self, root):\n        \"\"\"\n        :type root: Tree",
        "test_code": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
            "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
            "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
        ]
    },
    {
        "task_description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n# Definition for a  binary tree node\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def pack(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List",
        "test_code": [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ]
    },
    {
        "task_description": "Write a function to count the number of unique lists within a list.",
        "generated_code": "Write a function to count the number of unique lists within a list.\nfunc CountUniqueLists(lists []*List) int {\n\tvar count int\n\tfor _, list := range lists {\n\t\tif list.Len() == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountUniqueListsWithCount returns the number of unique lists with the given count.\nfunc CountUniqueListsWithCount(lists []",
        "test_code": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ]
    },
    {
        "task_description": "Write a function to find the combinations of sums with tuples in the given tuple list.",
        "generated_code": "Write a function to find the combinations of sums with tuples in the given tuple list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findCombinations(self, nums):\n        \"\"\"\n        :type nums",
        "test_code": [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ]
    },
    {
        "task_description": "Write a python function to check whether the count of divisors is even or odd.",
        "generated_code": "Write a python function to check whether the count of divisors is even or odd.\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;",
        "test_code": [
            "assert count_Divisors(10) == \"Even\"",
            "assert count_Divisors(100) == \"Odd\"",
            "assert count_Divisors(125) == \"Even\""
        ]
    },
    {
        "task_description": "Write a python function to find the sum of all odd length subarrays.",
        "generated_code": "Write a python function to find the sum of all odd length subarrays.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        ",
        "test_code": [
            "assert Odd_Length_Sum([1,2,4]) == 14",
            "assert Odd_Length_Sum([1,2,1,2]) == 15",
            "assert Odd_Length_Sum([1,7]) == 8"
        ]
    },
    {
        "task_description": "Write a function to convert rgb color to hsv color.",
        "generated_code": "Write a function to convert rgb color to hsv color.\nfunc rgbToHsv(r, g, b float64) (h, s, v float64) {\n\th = (r + g + b) / 3\n\ts = (r - g - b) / 6\n\tv = (g - r - b) / 6\n\treturn\n}\n\n// Convert a color to hsv color.\nfunc hsvToRgb(",
        "test_code": [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ]
    },
    {
        "task_description": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "Write a function to find the product of first even and odd number of a given list.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findProduct(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype",
        "test_code": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ]
    },
    {
        "task_description": "Write a function to convert tuple string to integer tuple.",
        "generated_code": "Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def convert(tuple_string):\n        \"\"\"\n        Convert tuple string to integer tuple.\n        \"\"\"\n        return tuple(int(x) for x in tuple_string.split(\",\"))\n\n    return convert\n\n\ndef get_tuple_from_string(tuple_string):\n    \"\"\"\n    Get tuple from tuple string.\n    \"\"\"\n    return tuple(",
        "test_code": [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
        ]
    },
    {
        "task_description": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "generated_code": "Write a function to locate the right insertion point for a specified value in sorted order.\nfunc Insert(s []int, x int) int {\n\tif len(s) == 0 {\n\t\treturn 0\n\t}\n\tif x < s[0] {\n\t\treturn s[0]\n\t}\n\tif x > s[len(s)-1] {\n\t\treturn s[len(s)-1]\n\t}\n\treturn s[",
        "test_code": [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an a followed by three 'b'.",
        "generated_code": "Write a function that matches a string that has an a followed by three 'b'.\n//\n// The function returns the string that is matched.\nfunc Match(s string) string {\n\treturn MatchString(s, \"b\")\n}\n\n// MatchString returns the string that is matched.\nfunc MatchString(s string, b string) string {\n\tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\tif len(b",
        "test_code": [
            "assert text_match_three(\"ac\")==('Not matched!')",
            "assert text_match_three(\"dc\")==('Not matched!')",
            "assert text_match_three(\"abbbba\")==('Found a match!')"
        ]
    },
    {
        "task_description": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "Write a function to create a new tuple from the given string and list.\nfunc NewTupleFromString(s string) (Tuple, error) {\n\treturn NewTupleFromStringAndList(s, nil)\n}\n\n// NewTupleFromStringAndList creates a new tuple from the given string and list.\nfunc NewTupleFromStringAndList(s string, list []string) (Tuple, error) {\n\tif len(",
        "test_code": [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ]
    },
    {
        "task_description": "Write a function to calculate the perimeter of a regular polygon.",
        "generated_code": "Write a function to calculate the perimeter of a regular polygon.\nfunc perimeter(polygon Polygon) float64 {\n\tvar perimeter float64\n\tfor i := 0; i < len(polygon); i++ {\n\t\tperimeter += polygon[i].Perimeter()\n\t}\n\treturn perimeter\n}\n\n// Calculate the perimeter of a regular polygon.\nfunc perimeter2(polygon Polygon) float64 {\n\tvar perimeter",
        "test_code": [
            "assert perimeter_polygon(4,20)==80",
            "assert perimeter_polygon(10,15)==150",
            "assert perimeter_polygon(9,7)==63"
        ]
    },
    {
        "task_description": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "Write a python function to check whether every even index contains even numbers of a given list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: Tree",
        "test_code": [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ]
    },
    {
        "task_description": "Write a function to remove the nested record from the given tuple.",
        "generated_code": "Write a function to remove the nested record from the given tuple.\nfunc (t *Tuple) Remove(key string) {\n\tt.RemoveAt(t.Index(key))\n}\n\n// RemoveAt removes the given key from the tuple.\nfunc (t *Tuple) RemoveAt(index int) {\n\tif index < 0 || index >= len(t.Keys) {\n\t\treturn\n\t}\n\tt.Keys = t.",
        "test_code": [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
        ]
    },
    {
        "task_description": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "Write a python function to count the number of lists in a given number of lists.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countLists(self, numLists):\n        \"\"\"\n        :type numL",
        "test_code": [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ]
    },
    {
        "task_description": "Write a python function to find the last position of an element in a sorted array.",
        "generated_code": "Write a python function to find the last position of an element in a sorted array.\n#\n# Note:\n#\n# The input array must be sorted.\n#\n# The output array will be sorted.\n#\n# The function will return the position of the last element in the sorted array.\n#\n# Example 1:\n#\n# Input: [1,2,3,4,5,6,7,8,9]\n# Output:",
        "test_code": [
            "assert last([1,2,3],1,3) == 0",
            "assert last([1,1,1,2,3,4],1,6) == 2",
            "assert last([2,3,2,3,6,8,9],3,8) == 3"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n//\n// Returns the function that matches the string.\nfunc MatchString(s string) func(string) bool {\n\treturn func(s string) bool {\n\t\treturn strings.HasPrefix(s, \"a\")\n\t}\n}\n\n// MatchStringFunc is a function that matches a string that has an 'a' followed by anything",
        "test_code": [
            "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
            "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
            "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
        ]
    },
    {
        "task_description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
        "generated_code": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cctype>\n#include <cmath>\n#include <cstdio",
        "test_code": [
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
        ]
    },
    {
        "task_description": "Write function to find the sum of all items in the given dictionary.",
        "generated_code": "Write function to find the sum of all items in the given dictionary.\nfunc Sum(dst []int) int {\n\tif len(dst) == 0 {\n\t\treturn 0\n\t}\n\tsum := 0\n\tfor _, v := range dst {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n// SumInt function to find the sum of all items in the given slice.\nfunc SumInt(dst []int)",
        "test_code": [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "generated_code": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n# Note:\n# The function is defined as follows:\n# sum_of_odd_numbers_in_range(l, r) = sum_of_odd_numbers_in_range(l, r) + sum_of_odd_numbers_in_range(l - 1, r)\n#\n# The function is defined as",
        "test_code": [
            "assert sum_in_Range(2,5) == 8",
            "assert sum_in_Range(5,7) == 12",
            "assert sum_in_Range(7,13) == 40"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of an array.",
        "generated_code": "Write a python function to find the sum of an array.\n\n# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n\n# Your Interval object will be instantiated and called as such:\n# i = Interval(s, e)\n# i.start = s\n# i.end = e\n",
        "test_code": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ]
    },
    {
        "task_description": "Write a python function to left rotate the bits of a given number.",
        "generated_code": "Write a python function to left rotate the bits of a given number.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def rotateBits(self, num):\n        \"\"\"\n        :type num: int\n        :r",
        "test_code": [
            "assert left_Rotate(16,2) == 64",
            "assert left_Rotate(10,2) == 40",
            "assert left_Rotate(99,3) == 792"
        ]
    },
    {
        "task_description": "Write a function to remove all whitespaces from a string.",
        "generated_code": "Write a function to remove all whitespaces from a string.\nfunc removeWhitespace(s string) string {\n\treturn strings.TrimSpace(s)\n}\n\n// removeWhitespace removes all whitespaces from a string.\nfunc removeWhitespace(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// removeWhitespace removes all whitespaces from a string.\nfunc",
        "test_code": [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')"
        ]
    },
    {
        "task_description": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "Write a python function to count the number of equal numbers from three given integers.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countEqual(self, root):\n        \"\"\"\n        :type root: TreeNode\n",
        "test_code": [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ]
    },
    {
        "task_description": "Write a python function to count the number of rotations required to generate a sorted array.",
        "generated_code": "Write a python function to count the number of rotations required to generate a sorted array.\n\n# Input:\n# 1. A list of integers.\n# 2. A list of strings.\n# 3. A list of lists.\n# 4. A list of lists.\n# 5. A list of lists.\n# 6. A list of lists.\n# 7. A list of lists.\n# 8. A list of lists.\n# 9. A",
        "test_code": [
            "assert count_Rotation([3,2,1],3) == 1",
            "assert count_Rotation([4,5,1,2,3],5) == 2",
            "assert count_Rotation([7,8,9,1,2,3],6) == 3"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given number is a perfect square or not.",
        "generated_code": "Write a python function to check whether the given number is a perfect square or not.\n#\n# @param n The number to check.\n# @return True if the number is a perfect square, False otherwise.\ndef is_perfect_square(n):\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0",
        "test_code": [
            "assert is_Perfect_Square(10) == False",
            "assert is_Perfect_Square(36) == True",
            "assert is_Perfect_Square(14) == False"
        ]
    },
    {
        "task_description": "Write a python function to check whether the product of numbers is even or not.",
        "generated_code": "Write a python function to check whether the product of numbers is even or not.\n#\n# The function is given a list of numbers and returns true if the product is even.\n#\n# Example:\n#\n# Input: [1,2,3,4]\n# Output: true\n# Explanation: The product of 1, 2, 3, 4 is 3.\n#\n# Companies\n# Google\n# Related Topics\n# Math\n# Similar Questions",
        "test_code": [
            "assert is_Product_Even([1,2,3],3) == True",
            "assert is_Product_Even([1,2,1,4],4) == True",
            "assert is_Product_Even([1,1],2) == False"
        ]
    },
    {
        "task_description": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "Write a function to find the list in a list of lists whose sum of elements is the highest.\n\n# Definition for a list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def findList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode",
        "test_code": [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
            "assert max_sum_list([[2,3,1]])==[2,3,1] "
        ]
    },
    {
        "task_description": "Write a function to find maximum run of uppercase characters in the given string.",
        "generated_code": "Write a function to find maximum run of uppercase characters in the given string.\nfunc Upper(s string) int {\n\tvar max int\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] >= 'a' && s[i] <= 'z' {\n\t\t\tmax = max(max, i)\n\t\t}\n\t}\n\treturn max\n}\n\n// Upper returns the maximum run of u",
        "test_code": [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ]
    },
    {
        "task_description": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "Write a python function to find the first odd number in a given list of numbers.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findOdd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n",
        "test_code": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ]
    },
    {
        "task_description": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "Write a function to check if the given tuples contain the k or not.\nfunc CheckTuples(tuple []interface{}, k string) bool {\n\tfor _, t := range tuple {\n\t\tif t == k {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Check if the given tuple contains the k or not.\nfunc CheckTuple(tuple interface{}, k string) bool {\n\treturn Check",
        "test_code": [
            "assert check_K((10, 4, 5, 6, 8), 6) == True",
            "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
        ]
    },
    {
        "task_description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
        "generated_code": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n#\n# Input:\n#\n# First tuple:\n#\n# [1,2,3,4]\n#\n# Second tuple:\n#\n# [1,2,3,4]\n#\n# Output:\n#\n# True\n# False\n#\n# Explanation:\n#\n# The first tuple is smaller than the second",
        "test_code": [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ]
    },
    {
        "task_description": "Write a function to iterate over elements repeating each as many times as its count.",
        "generated_code": "Write a function to iterate over elements repeating each as many times as its count.\nfunc Repeat(f func(int) int) func() {\n\treturn func() {\n\t\tfor i := 0; i < f(1); i++ {\n\t\t\tf(i)\n\t\t}\n\t}\n}\n\n// RepeatN repeats the given number of times.\nfunc RepeatN(n int, f func(int) int) func() {\n\treturn",
        "test_code": [
            "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
            "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
            "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        ]
    },
    {
        "task_description": "Write a function to check if two lists of tuples are identical or not.",
        "generated_code": "Write a function to check if two lists of tuples are identical or not.\n#\n# This function is used to check if two lists of tuples are identical.\n#\n# Input:\n#\n#   first_list - a list of tuples\n#   second_list - a list of tuples\n#\n# Output:\n#\n#   True if the two lists are identical, False otherwise.\n#\n# Explanation:\n#\n#",
        "test_code": [
            "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
            "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
            "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
        ]
    },
    {
        "task_description": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
        "generated_code": "Write a function to abbreviate 'road' as 'rd.' in a given string.\nfunc abbreviateRoad(s string) string {\n\tif len(s) == 0 {\n\t\treturn s\n\t}\n\tif s[0] == 'r' {\n\t\treturn s[1:]\n\t}\n\treturn s\n}\n\n// abbreviateRoads takes a string and abbreviates it to a given length.\nfunc abbreviateRoads(",
        "test_code": [
            "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
            "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
            "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
        ]
    },
    {
        "task_description": "Write a function to find length of the string.",
        "generated_code": "Write a function to find length of the string.\nfunc FindLength(s string) int {\n\treturn len(s)\n}\n\n// Find returns the index of the first occurrence of the substring s in the string s1.\n// If the substring s1 is not found, Find returns -1.\nfunc Find(s1, s2 string) int {\n\treturn strings.Index(s1, s2)\n}\n\n// Find",
        "test_code": [
            "assert string_length('python')==6",
            "assert string_length('program')==7",
            "assert string_length('language')==8"
        ]
    },
    {
        "task_description": "Write a function to find the area of a rombus.",
        "generated_code": "Write a function to find the area of a rombus.\nfunc FindRombus(x, y int) (int, int) {\n\tx1 := x - 1\n\tx2 := x + 1\n\ty1 := y - 1\n\ty2 := y + 1\n\tif x1 < 0 || x2 >= len(rombuses) || y1 < 0 || y2 >= len(rombuses) {\n\t\treturn 0",
        "test_code": [
            "assert rombus_area(10,20)==100",
            "assert rombus_area(10,5)==25",
            "assert rombus_area(4,2)==4"
        ]
    },
    {
        "task_description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
        "generated_code": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n *\n * @param {Array} array The array to sort.\n * @return {Array} The sorted array.\n */\nfunction sort(array) {\n  array.sort(function (a, b) {\n    return a - b;\n  });\n  return array;\n}\n\n/**\n * @param {",
        "test_code": [
            "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
            "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
            "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        ]
    },
    {
        "task_description": "Write a function to clear the values of the given tuples.",
        "generated_code": "Write a function to clear the values of the given tuples.\nfunc (t *Tuple) Clear(values ...interface{}) {\n\tt.Clear(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values",
        "test_code": [
            "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
            "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
            "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
        ]
    },
    {
        "task_description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
        "generated_code": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findNth(self, root, n):\n        \"\"\"\n        :type root: Tree",
        "test_code": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
        ]
    },
    {
        "task_description": "Write a python function to count lower case letters in a given string.",
        "generated_code": "Write a python function to count lower case letters in a given string.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :r",
        "test_code": [
            "assert lower_ctr('abc') == 3",
            "assert lower_ctr('string') == 6",
            "assert lower_ctr('Python') == 5"
        ]
    },
    {
        "task_description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
        "generated_code": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):",
        "test_code": [
            "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
            "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
            "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
        ]
    },
    {
        "task_description": "Write a function to check whether the given month number contains 28 days or not.",
        "generated_code": "Write a function to check whether the given month number contains 28 days or not.\nfunc (m *Month) Contains28Days(month int) bool {\n\treturn m.Is28Days(month)\n}\n\n// Is28Days returns true if the given month number is 28 days.\nfunc (m *Month) Is28Days(month int) bool {\n\treturn month == 28\n}\n\n// Is29Days returns true if the given month number is",
        "test_code": [
            "assert check_monthnum_number(2)==True",
            "assert check_monthnum_number(1)==False",
            "assert check_monthnum_number(3)==False"
        ]
    },
    {
        "task_description": "Write a function to merge two dictionaries into a single expression.",
        "generated_code": "Write a function to merge two dictionaries into a single expression.\nfunc mergeDict(d1, d2 map[string]interface{}) map[string]interface{} {\n\tm := make(map[string]interface{})\n\tfor k, v := range d1 {\n\t\tm[k] = v\n\t}\n\tfor k, v := range d2 {\n\t\tm[k] = v\n\t}\n\treturn m",
        "test_code": [
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
            "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
        ]
    },
    {
        "task_description": "Write a function to return true if the password is valid.",
        "generated_code": "Write a function to return true if the password is valid.\nfunc (p *Password) IsValid() bool {\n\treturn p.Password == \"\" || p.Password == \"*\"\n}\n\n// Password returns the password.\nfunc (p *Password) Password() string {\n\treturn p.Password\n}\n\n// SetPassword sets the password.\nfunc (p *Password) SetPassword(password string) {\n\tp.Password = password\n",
        "test_code": [
            "assert pass_validity(\"password\")==False",
            "assert pass_validity(\"Password@10\")==True",
            "assert pass_validity(\"password@10\")==False"
        ]
    },
    {
        "task_description": "Write a function to check if the given string starts with a substring using regex.",
        "generated_code": "Write a function to check if the given string starts with a substring using regex.\nfunc IsSubstring(s string, regex string) bool {\n\treturn strings.HasPrefix(s, regex)\n}\n\n// IsSubstringInSlice checks if the given string starts with a substring in the given slice.\nfunc IsSubstringInSlice(s string, slice []string) bool {\n\treturn IsSubstring(s, strings.Join",
        "test_code": [
            "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
            "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
            "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
        ]
    },
    {
        "task_description": "Write a python function to remove even numbers from a given list.",
        "generated_code": "Write a python function to remove even numbers from a given list.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def removeEvenNumbers(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not",
        "test_code": [
            "assert remove_even([1,3,5,2]) == [1,3,5]",
            "assert remove_even([5,6,7]) == [5,7]",
            "assert remove_even([1,2,3,4]) == [1,3]"
        ]
    },
    {
        "task_description": "Write a python function to access multiple elements of specified index from a given list.",
        "generated_code": "Write a python function to access multiple elements of specified index from a given list.\n\n>>> def get_list(list, index):\n...     return list[index]\n\n>>> list = [1, 2, 3]\n>>> get_list(list, 0)\n1\n>>> get_list(list, 1)\n2\n>>> get_list(list, 2)\n3\n\n>>> list = [1, 2, 3]\n>>> get_",
        "test_code": [
            "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
            "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
            "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
        ]
    },
    {
        "task_description": "Write a python function to find the type of triangle from the given sides.",
        "generated_code": "Write a python function to find the type of triangle from the given sides.\n\nThe function returns the type of triangle.\n\nThe function is a wrapper around the function `triangle_type` from the `triangle` module.\n\n\"\"\"\n\nimport triangle\n\ndef triangle_type(sides):\n    \"\"\"\n    Returns the type of triangle.\n\n    :param sides: The sides of the triangle.\n    :type sides: list\n    :return",
        "test_code": [
            "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
            "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
            "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
        ]
    },
    {
        "task_description": "Write a function to sum a specific column of a list in a given list of lists.",
        "generated_code": "Write a function to sum a specific column of a list in a given list of lists.\nfunc Sum(lists ...[]int) int {\n\tvar sum int\n\tfor _, list := range lists {\n\t\tsum += sum(list)\n\t}\n\treturn sum\n}\n\n// Sums returns the sum of all the elements in the given list.\nfunc Sums(lists ...[]int) int {\n\tvar sum int\n\tfor _,",
        "test_code": [
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
        ]
    },
    {
        "task_description": "Write a function to count alphabets,digits and special charactes in a given string.",
        "generated_code": "Write a function to count alphabets,digits and special charactes in a given string.\nfunc CountAlphabet(s string) int {\n\tvar count int\n\tfor _, c := range s {\n\t\tif c >= 'a' && c <= 'z' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountDigits counts the number of digits in a given string.\nfunc CountDigits(",
        "test_code": [
            "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
            "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
            "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
        ]
    },
    {
        "task_description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
        "generated_code": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\nfunc findSecondMostRepeatedString(seq []string) string {\n\tvar maxLen int\n\tvar maxLen2 int\n\tvar maxLen3 int\n\tvar maxLen4 int\n\tvar maxLen5 int\n\tvar maxLen6 int\n\tvar maxLen7 int\n\tvar maxLen8 int\n\tvar maxLen9 int\n\tvar",
        "test_code": [
            "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
            "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
            "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
        ]
    },
    {
        "task_description": "Write a function to round up a number to specific digits.",
        "generated_code": "Write a function to round up a number to specific digits.\nfunc RoundUp(n int) int {\n\treturn n + int(math.Pow(10, float64(n))) - 1\n}\n\n// RoundDown rounds down a number to specific digits.\nfunc RoundDown(n int) int {\n\treturn n - int(math.Pow(10, float64(n)))\n}\n\n// Round rounds a number to a specific digits",
        "test_code": [
            "assert round_up(123.01247,0)==124",
            "assert round_up(123.01247,1)==123.1",
            "assert round_up(123.01247,2)==123.02"
        ]
    },
    {
        "task_description": "Write a python function to count equal element pairs from the given array.",
        "generated_code": "Write a python function to count equal element pairs from the given array.\nfunc CountEqual(arr []int) int {\n\tvar count int\n\tfor _, v := range arr {\n\t\tif v == v {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountEqualEqual returns the number of equal elements in the given array.\nfunc CountEqualEqual(arr []int) int {\n\treturn",
        "test_code": [
            "assert count_Pairs([1,1,1,1],4) == 6",
            "assert count_Pairs([1,5,1],3) == 1",
            "assert count_Pairs([3,2,1,7,8,9],6) == 0"
        ]
    },
    {
        "task_description": "Write a function to extract the maximum numeric value from a string by using regex.",
        "generated_code": "Write a function to extract the maximum numeric value from a string by using regex.\nfunc ExtractMax(s string) (int, error) {\n\tre := regexp.MustCompile(`^\\d+$`)\n\treturn re.FindString(s)\n}\n\n// ExtractMaxInt extracts the maximum numeric value from a string by using regex.\nfunc ExtractMaxInt(s string) (int, error) {\n\tre := regexp",
        "test_code": [
            "assert extract_max('100klh564abc365bg') == 564",
            "assert extract_max('hello300how546mer231') == 546",
            "assert extract_max('its233beenalong343journey234') == 343"
        ]
    },
    {
        "task_description": "Write a function to get dictionary keys as a list.",
        "generated_code": "Write a function to get dictionary keys as a list.\n    def get_dict_keys(self, key):\n        return list(self.dict_keys.get(key, []))\n\n    # Get a dictionary key as a list.\n    def get_dict_key(self, key):\n        return list(self.dict_keys.get(key, []))\n\n    # Get a dictionary key as a list.\n    def get_dict_",
        "test_code": [
            "assert get_key({1:'python',2:'java'})==[1,2]",
            "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
            "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
        ]
    },
    {
        "task_description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
        "generated_code": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\n# Definition for a binary numeral.\n# class BinaryNumeral(object):\n#     def __init__(self, num):\n#         self.num = num\n#         self.power = 1\n\nclass Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n",
        "test_code": [
            "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
            "assert generate_matrix(2)==[[1,2],[4,3]]",
            "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
        ]
    },
    {
        "task_description": "Write a python function to find the slope of a line.",
        "generated_code": "Write a python function to find the slope of a line.\n\n# Input:\n#   x, y, slope\n# Output:\n#   slope\n\n# Note:\n#   The slope is calculated using the slope of the line.\n\n# Example:\n#   >>> slope(x, y)\n#   0.0\n\n# References:\n#   https://en.wikipedia.org/wiki/Line_line_intersection\n\n",
        "test_code": [
            "assert slope(4,2,2,5) == -1.5",
            "assert slope(2,4,4,6) == 1",
            "assert slope(1,2,4,2) == 0"
        ]
    },
    {
        "task_description": "Write a function to find length of the subarray having maximum sum.",
        "generated_code": "Write a function to find length of the subarray having maximum sum.\nfunc FindMaxSum(arr []int) int {\n\tmaxSum := 0\n\tfor _, v := range arr {\n\t\tif v > maxSum {\n\t\t\tmaxSum = v\n\t\t}\n\t}\n\treturn maxSum\n}\n\n// FindMaxSum2 finds the maximum sum of the subarray having maximum sum.\nfunc FindMaxSum2(arr []int) int",
        "test_code": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
            "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
            "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
        ]
    },
    {
        "task_description": "Write a python function to find the cube sum of first n odd natural numbers.",
        "generated_code": "Write a python function to find the cube sum of first n odd natural numbers.\n\n# Note:\n# 1. The function is defined as a function of two variables.\n# 2. The function is defined as a function of three variables.\n# 3. The function is defined as a function of four variables.\n\n# Example 1:\n\n# Input:\n# [1, 2, 3, 4]\n# Output:\n# 3\n# Explanation:",
        "test_code": [
            "assert cube_Sum(2) == 28",
            "assert cube_Sum(3) == 153",
            "assert cube_Sum(4) == 496"
        ]
    },
    {
        "task_description": "Write a python function to find minimum number swaps required to make two binary strings equal.",
        "generated_code": "Write a python function to find minimum number swaps required to make two binary strings equal.\n\n# Input:\n# 1. A string\n# 2. A string\n# 3. A string\n# 4. A string\n# 5. A string\n# 6. A string\n# 7. A string\n# 8. A string\n# 9. A string\n# 10. A string\n# 11. A string\n# 12. A string\n# 13. A string",
        "test_code": [
            "assert min_Swaps(\"0011\",\"1111\") == 1",
            "assert min_Swaps(\"00011\",\"01001\") == 2",
            "assert min_Swaps(\"111\",\"111\") == 0"
        ]
    },
    {
        "task_description": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
        "generated_code": "Write a function to sort the tuples alphabetically by the first item of each tuple.\nfunc SortByFirst(tuples []*Tuple) {\n\tsort.Sort(sort.Reverse(sort.StringSlice(tuples)))\n}\n\n// SortBySecond sorts the tuples alphabetically by the second item of each tuple.\nfunc SortBySecond(tuples []*Tuple) {\n\tsort.Sort(sort.Reverse",
        "test_code": [
            "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
            "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
            "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
        ]
    },
    {
        "task_description": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
        "generated_code": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\n# Input:\n#   x: the x-coordinate of the quadratic equation\n#   y: the y-coordinate of the quadratic equation\n#   x_min: the minimum value of the x-coordinate\n#   x_max: the maximum value of the x-coordinate\n#   y_",
        "test_code": [
            "assert Check_Solution(2,0,-1) == \"Yes\"",
            "assert Check_Solution(1,-5,6) == \"No\"",
            "assert Check_Solution(2,0,2) == \"Yes\""
        ]
    },
    {
        "task_description": "Write a function to count the number of inversions in the given array.",
        "generated_code": "Write a function to count the number of inversions in the given array.\nfunc CountInversions(inversions []int) int {\n\tvar count int\n\tfor _, i := range inversions {\n\t\tif i == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n// CountInversionsCount returns the number of inversions in the given array.\nfunc CountInversionsCount(inversions []int) int {\n",
        "test_code": [
            "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
            "assert get_inv_count([8, 4, 2, 1], 4) == 6",
            "assert get_inv_count([3, 1, 2], 3) == 2"
        ]
    },
    {
        "task_description": "Write a function to find the number which occurs for odd number of times in the given array.",
        "generated_code": "Write a function to find the number which occurs for odd number of times in the given array.\nfunc FindOdd(arr []int) int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\todd := 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i]%2 == 1 {\n\t\t\todd = odd + 1\n\t\t}\n\t}\n\treturn odd\n}",
        "test_code": [
            "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
            "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
            "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
        ]
    },
    {
        "task_description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
        "generated_code": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\n# Definition for a  binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findUglyNumber(self, pList):\n        \"\"\"\n        :",
        "test_code": [
            "assert nth_super_ugly_number(12,[2,7,13,19])==32",
            "assert nth_super_ugly_number(10,[2,7,13,19])==26",
            "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
        ]
    },
    {
        "task_description": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
        "generated_code": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\n#\n# Example:\n#\n# Input:\n#\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#\n# Output:\n#\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#\n# Explanation:\n#\n",
        "test_code": [
            "assert get_Number(8,5) == 2",
            "assert get_Number(7,2) == 3",
            "assert get_Number(5,2) == 3"
        ]
    },
    {
        "task_description": "Write a python function to count the number of digits in factorial of a given number.",
        "generated_code": "Write a python function to count the number of digits in factorial of a given number.\n\n# Example\n\n# Given n = 3, return n!.\n#\n# Definition for a binary numeral.\n# class BinaryNumeral(object):\n#     def __init__(self, num):\n#         self.num = num\n#     def __str__(self):\n#         return str(self.num)\n\n# Your function should take",
        "test_code": [
            "assert find_Digits(7) == 4",
            "assert find_Digits(5) == 3",
            "assert find_Digits(4) == 2"
        ]
    },
    {
        "task_description": "Write a function to find the minimum number of platforms required for a railway/bus station.",
        "generated_code": "Write a function to find the minimum number of platforms required for a railway/bus station.\n    \"\"\"\n    def __init__(self, func):\n        self.func = func\n        self.min_platforms = 0\n\n    def __call__(self, *args):\n        \"\"\"\n        Call the function and return the minimum number of platforms required.\n        \"\"\"\n        return self.func(*args)\n\n    def __repr__(self):",
        "test_code": [
            "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
            "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
            "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
        ]
    },
    {
        "task_description": "Write a python function to copy a list from a singleton tuple.",
        "generated_code": "Write a python function to copy a list from a singleton tuple.\n\n>>> from collections import namedtuple\n>>> from functools import partial\n>>> from itertools import chain\n\n>>> from pprint import pprint\n\n>>> from pprint import pprint\n\n>>> from pprint import pprint\n\n>>> from pprint import pprint\n\n>>> from pprint import pprint\n\n>>> from pprint import pprint\n\n>>> from pprint import",
        "test_code": [
            "assert lcopy([1, 2, 3]) == [1, 2, 3]",
            "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
            "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
        ]
    },
    {
        "task_description": "Write a function to find the area of a trapezium.",
        "generated_code": "Write a function to find the area of a trapezium.\nfunc FindTrapezium(x, y, z float64) (float64, float64) {\n\treturn x, y\n}\n\n// FindTrapezium returns the area of a trapezium.\nfunc FindTrapezium(x, y, z float64) (float64, float64) {\n\treturn x, y\n}\n\n// FindTrape",
        "test_code": [
            "assert area_trapezium(6,9,4)==30",
            "assert area_trapezium(10,20,30)==450",
            "assert area_trapezium(15,25,35)==700"
        ]
    },
    {
        "task_description": "Write a python function to find sum of all prime divisors of a given number.",
        "generated_code": "Write a python function to find sum of all prime divisors of a given number.\n\n# Definition for a  binary tree node\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findSumOfPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :",
        "test_code": [
            "assert Sum(60) == 10",
            "assert Sum(39) == 16",
            "assert Sum(40) == 7"
        ]
    },
    {
        "task_description": "Write a function to check if a triangle of positive area is possible with the given angles.",
        "generated_code": "Write a function to check if a triangle of positive area is possible with the given angles.\nfunc CheckTriangle(area float64, angles []float64) bool {\n\tfor _, angle := range angles {\n\t\tif math.Abs(area-angle) < math.Abs(area) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// CheckTriangleWithAngle checks if a triangle of positive area is possible with the",
        "test_code": [
            "assert is_triangleexists(50,60,70)==True",
            "assert is_triangleexists(90,45,45)==True",
            "assert is_triangleexists(150,30,70)==False"
        ]
    },
    {
        "task_description": "Write a python function to find sum of inverse of divisors.",
        "generated_code": "Write a python function to find sum of inverse of divisors.\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<",
        "test_code": [
            "assert Sum_of_Inverse_Divisors(6,12) == 2",
            "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
            "assert Sum_of_Inverse_Divisors(1,4) == 4"
        ]
    },
    {
        "task_description": "Write a python function to remove negative numbers from a list.",
        "generated_code": "Write a python function to remove negative numbers from a list.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def removeNegative(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype",
        "test_code": [
            "assert remove_negs([1,-2,3,-4]) == [1,3]",
            "assert remove_negs([1,2,3,-4]) == [1,2,3]",
            "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
        ]
    },
    {
        "task_description": "Write a python function to find sum of odd factors of a number.",
        "generated_code": "Write a python function to find sum of odd factors of a number.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def oddFactors(self, n):\n        \"\"\"\n        :type n: int\n        :r",
        "test_code": [
            "assert sum_of_odd_Factors(30) == 24",
            "assert sum_of_odd_Factors(18) == 13",
            "assert sum_of_odd_Factors(2) == 1"
        ]
    },
    {
        "task_description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
        "generated_code": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nfunc Heapify(list []interface{}) []interface{} {\n\tif len(list) == 0 {\n\t\treturn list\n\t}\n\n\theap := make([]interface{}, 0, len(list))\n\tfor i := 0; i < len(list); i++ {\n\t\theap = append(heap, list[i])\n",
        "test_code": [
            "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
            "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
            "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
        ]
    },
    {
        "task_description": "Write a python function to check for even parity of a given number.",
        "generated_code": "Write a python function to check for even parity of a given number.\n\n# Example:\n# def even(n):\n#     return n % 2 == 0\n\n# print even(5)\n\n# Note:\n# The function will return False if the number is not even.\n\n# Note:\n# The function will return True if the number is even.\n\n# Note:\n# The function will return False if the number is not even.\n",
        "test_code": [
            "assert check_Even_Parity(10) == True",
            "assert check_Even_Parity(11) == False",
            "assert check_Even_Parity(18) == True"
        ]
    },
    {
        "task_description": "Write a python function to find minimum adjacent swaps required to sort binary array.",
        "generated_code": "Write a python function to find minimum adjacent swaps required to sort binary array.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i",
        "test_code": [
            "assert find_Min_Swaps([1,0,1,0],4) == 3",
            "assert find_Min_Swaps([0,1,0],3) == 1",
            "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
        ]
    },
    {
        "task_description": "Write a function to list out the list of given strings individually using map function.",
        "generated_code": "Write a function to list out the list of given strings individually using map function.\nfunc List(strings ...string) {\n\tfor _, s := range strings {\n\t\tfmt.Println(s)\n\t}\n}\n\n// List a list of strings using map function.\nfunc ListMap(strings ...string) {\n\tfor _, s := range strings {\n\t\tfmt.Println(s)\n\t}\n}\n\n//",
        "test_code": [
            "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
            "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
            "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
        ]
    },
    {
        "task_description": "Write a function to count number of lists in a given list of lists and square the count.",
        "generated_code": "Write a function to count number of lists in a given list of lists and square the count.\nfunc CountLists(lists []*List) int {\n\tcount := 0\n\tfor _, list := range lists {\n\t\tcount += CountLists(list.Lists)\n\t}\n\treturn count\n}\n\n// CountLists returns the number of lists in a given list of lists.\nfunc CountLists(lists []*List) int {",
        "test_code": [
            "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
            "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
        ]
    },
    {
        "task_description": "Write a function to generate all sublists of a given list.",
        "generated_code": "Write a function to generate all sublists of a given list.\nfunc GenerateSublists(list []int) []int {\n\tvar result []int\n\tfor _, i := range list {\n\t\tresult = append(result, i)\n\t}\n\treturn result\n}\n\n// GenerateSublists2 generates all sublists of a given list.\nfunc GenerateSublists2(list []int) []int {\n\tvar result []int",
        "test_code": [
            "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
            "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
            "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
        ]
    },
    {
        "task_description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
        "generated_code": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nfunc isAlphaNumeric(s string) bool {\n\treturn strings.HasPrefix(s, \"abcdefghijklmnopqrstuvwxyz\")\n}\n\n// isAlphaNumeric returns true if the given string is ending with only alphanumeric characters.\nfunc isAlphaNumeric(s string) bool {\n\treturn",
        "test_code": [
            "assert check_alphanumeric(\"dawood@\") == 'Discard'",
            "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
            "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
        ]
    },
    {
        "task_description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
        "generated_code": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\n\n# Definition for an anagram.\nclass Solution(object):\n    def findAnagrams(self, words, target):\n        \"\"\"\n        :type words: List[str]\n        :type target: str\n        :rtype: List[str]\n        \"\"\"\n        if not words:\n            return []\n        if not target:",
        "test_code": [
            "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
            "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
            "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
        ]
    },
    {
        "task_description": "Write a function to find the occurrences of n most common words in a given text.",
        "generated_code": "Write a function to find the occurrences of n most common words in a given text.\n\n# Note:\n# The function takes a string as input and returns a list of the words that occur in the text.\n# The function is not case sensitive.\n\ndef find_n_most_common_words(text):\n    # Create a list of words\n    words = []\n\n    # Create a dictionary of words\n    dictionary = {}\n\n    # Create a",
        "test_code": [
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
        ]
    },
    {
        "task_description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
        "generated_code": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\nInput:\n\nThe first line contains a list of integers, each integer in the range [1, 1000].\n\nOutput:\n\nThe longest sub-sequence is the longest element in the list.\n\nConstraints:\n\n1 <= len(input) <= 1000\n\nInput Format:\n\nThe first line contains a list of integers,",
        "test_code": [
            "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
            "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
            "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
        ]
    },
    {
        "task_description": "Write a function to find palindromes in a given list of strings using lambda function.",
        "generated_code": "Write a function to find palindromes in a given list of strings using lambda function.\n\n# Note:\n# The function should return a list of strings.\n# The function should return a list of lists of strings.\n# The function should return a list of lists of strings.\n# The function should return a list of lists of strings.\n# The function should return a list of lists of strings.\n# The function should return a list of lists of strings.",
        "test_code": [
            "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
            "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
            "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
        ]
    },
    {
        "task_description": "Write a function to print n-times a list using map function.",
        "generated_code": "Write a function to print n-times a list using map function.\nfunc printList(n int, list []int) {\n\tfor i := 0; i < n; i++ {\n\t\tfmt.Println(list[i])\n\t}\n}\n\n// A function to print a list using a map function.\nfunc printListMap(n int, list map[int]int) {\n\tfor i := 0; i < n;",
        "test_code": [
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
        ]
    },
    {
        "task_description": "Write a function to check whether the given month name contains 31 days or not.",
        "generated_code": "Write a function to check whether the given month name contains 31 days or not.\nfunc IsMonth31Days(monthName string) bool {\n\treturn len(monthName) == 3 && monthName[0] == '1' && monthName[1] == '0' && monthName[2] == '0'\n}\n\n// IsMonth31Days returns true if the given month name contains 31 days.\nfunc IsMonth31Days(monthName string)",
        "test_code": [
            "assert check_monthnumb(\"February\")==False",
            "assert check_monthnumb(\"January\")==True",
            "assert check_monthnumb(\"March\")==True"
        ]
    },
    {
        "task_description": "Write a python function to add a minimum number such that the sum of array becomes even.",
        "generated_code": "Write a python function to add a minimum number such that the sum of array becomes even.\n\n# Input:\n# array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# output = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Output:\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "test_code": [
            "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
            "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
            "assert min_Num([1,2,3],3) == 2"
        ]
    },
    {
        "task_description": "Write a python function to find the length of the last word in a given string.",
        "generated_code": "Write a python function to find the length of the last word in a given string.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution(object):\n    def findLastWord(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype",
        "test_code": [
            "assert length_Of_Last_Word(\"python language\") == 8",
            "assert length_Of_Last_Word(\"PHP\") == 3",
            "assert length_Of_Last_Word(\"\") == 0"
        ]
    },
    {
        "task_description": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
        "generated_code": "Write a function to remove sublists from a given list of lists, which are outside a given range.\nfunc RemoveSublists(lists []*List, start, end int) {\n\tfor i := start; i < end; i++ {\n\t\tfor j := 0; j < len(lists); j++ {\n\t\t\tif lists[j].Len() > i {\n\t\t\t\tlists[j].Remove(i)\n\t\t\t}\n\t\t}\n\t}\n",
        "test_code": [
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
        ]
    },
    {
        "task_description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
        "generated_code": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\n# Note:\n# 1. The function is not recursive.\n# 2. The function is not invertible.\n# 3. The function is not invertible.\n# 4. The function is not invertible.\n# 5. The function is not invertible.\n# 6. The function is not invertible.\n# 7.",
        "test_code": [
            "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
            "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
            "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given strings are rotations of each other or not.",
        "generated_code": "Write a python function to check whether the given strings are rotations of each other or not.\n#\n# This function is used to check whether two strings are rotations of each other.\n#\n# Input:\n#\n# - A string to check.\n# - A string to check.\n#\n# Output:\n#\n# - True if the strings are rotations of each other, False otherwise.\n#\n# Explanation:\n#\n# The",
        "test_code": [
            "assert are_Rotations(\"abc\",\"cba\") == False",
            "assert are_Rotations(\"abcd\",\"cdba\") == False",
            "assert are_Rotations(\"abacd\",\"cdaba\") == True"
        ]
    },
    {
        "task_description": "Write a function to check if a nested list is a subset of another nested list.",
        "generated_code": "Write a function to check if a nested list is a subset of another nested list.\nfunc (l *List) IsSubset(other *List) bool {\n\tif len(l.Items) != len(other.Items) {\n\t\treturn false\n\t}\n\tfor i := range l.Items {\n\t\tif !l.Items[i].IsSubset(other.Items[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n",
        "test_code": [
            "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
            "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
            "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
        ]
    },
    {
        "task_description": "Write a function to solve the fibonacci sequence using recursion.",
        "generated_code": "Write a function to solve the fibonacci sequence using recursion.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def fibonacci(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        ",
        "test_code": [
            "assert fibonacci(7) == 13",
            "assert fibonacci(8) == 21",
            "assert fibonacci(9) == 34"
        ]
    },
    {
        "task_description": "Write a python function to check if the string is a concatenation of another string.",
        "generated_code": "Write a python function to check if the string is a concatenation of another string.\n#\n# This function is used to check if a string is a concatenation of another string.\n#\n# Example:\n#\n#     def is_concatenation(string):\n#         return string.startswith('concatenation')\n#\n# Returns True if the string is a concatenation of another string.\n#\n# Note:",
        "test_code": [
            "assert check_Concat(\"abcabcabc\",\"abc\") == True",
            "assert check_Concat(\"abcab\",\"abc\") == False",
            "assert check_Concat(\"aba\",\"ab\") == False"
        ]
    },
    {
        "task_description": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
        "generated_code": "Write a function to find the minimum difference in the tuple pairs of given tuples.\n\n# Input:\n# A list of tuples of the form (x, y)\n# Output:\n# The minimum difference between the tuple pairs of given tuples.\n\n# Example:\n# Given tuples of the form (x, y) = (1, 2), return 3.\n\n# Definition for a binary tree node.\n# class TreeNode(object):",
        "test_code": [
            "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
            "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
            "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
        ]
    },
    {
        "task_description": "Write a python function to find lcm of two positive integers.",
        "generated_code": "Write a python function to find lcm of two positive integers.\n\n#include <iostream>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint lcm(int a, int b) {\n    return a * b / (a + b);\n}\n\nint main() {\n    int n",
        "test_code": [
            "assert lcm(4,6) == 12",
            "assert lcm(15,17) == 255",
            "assert lcm(2,6) == 6"
        ]
    },
    {
        "task_description": "Write a python function to sort the given string.",
        "generated_code": "Write a python function to sort the given string.\n#\n# The function sorts the given string in ascending order.\n#\n# The function returns the sorted string.\n#\n# Example:\n#\n# sort_string = lambda x: x.lower()\n#\n# sort_string('')\n# -> 'a'\n# sort_string('a')\n# -> 'a'\n# sort_string('a')\n# -> 'a'",
        "test_code": [
            "assert sort_String(\"cba\") == \"abc\"",
            "assert sort_String(\"data\") == \"aadt\"",
            "assert sort_String(\"zxy\") == \"xyz\""
        ]
    },
    {
        "task_description": "Write a function to check if the given tuple contains only k elements.",
        "generated_code": "Write a function to check if the given tuple contains only k elements.\nfunc containsOnlyK(tuple interface{}, k int) bool {\n\tfor i := 0; i < len(tuple); i++ {\n\t\tif tuple[i] != k {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// check if the given tuple contains only k elements.\nfunc containsOnlyK2(tuple interface{}, k int",
        "test_code": [
            "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
            "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
            "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
        "generated_code": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nfunc MatchString(s string) func(string) bool {\n\treturn func(s string) bool {\n\t\treturn strings.HasPrefix(s, \"a\") && strings.HasSuffix(s, \"b\")\n\t}\n}\n\n// MatchStringRegexp matches a string that has an 'a' followed",
        "test_code": [
            "assert text_match(\"aabbbbd\") == 'Not matched!'",
            "assert text_match(\"aabAbbbc\") == 'Not matched!'",
            "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
        ]
    },
    {
        "task_description": "Write a python function to find number of solutions in quadratic equation.",
        "generated_code": "Write a python function to find number of solutions in quadratic equation.\n\n# Input:\n#   x: the x-coordinate of the point\n#   y: the y-coordinate of the point\n#   x0: the x-coordinate of the first point\n#   y0: the y-coordinate of the first point\n#   x1: the x-coordinate of the second point\n#   y1: the y-",
        "test_code": [
            "assert Check_Solution(2,5,2) == \"2 solutions\"",
            "assert Check_Solution(1,1,1) == \"No solutions\"",
            "assert Check_Solution(1,2,1) == \"1 solution\""
        ]
    },
    {
        "task_description": "Write a function to find the sum of first even and odd number of a given list.",
        "generated_code": "Write a function to find the sum of first even and odd number of a given list.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype",
        "test_code": [
            "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
            "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
            "assert sum_even_odd([1,5,7,9,10])==11"
        ]
    },
    {
        "task_description": "Write a function to caluclate perimeter of a parallelogram.",
        "generated_code": "Write a function to caluclate perimeter of a parallelogram.\nfunc (p *parallelogram) perimeter(x, y int) int {\n\treturn p.perimeter(x, y, 0, 0)\n}\n\n// perimeter calculates perimeter of parallelogram.\nfunc (p *parallelogram) perimeter(x, y, z int, w int) int {\n\treturn p.perimeter(x, y, z, w)",
        "test_code": [
            "assert parallelogram_perimeter(10,20)==400",
            "assert parallelogram_perimeter(15,20)==600",
            "assert parallelogram_perimeter(8,9)==144"
        ]
    },
    {
        "task_description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
        "generated_code": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findNth(self, root, n):\n        \"\"\"\n        :type root: Tree",
        "test_code": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
        ]
    },
    {
        "task_description": "Write a python function to check whether all the bits are within a given range or not.",
        "generated_code": "Write a python function to check whether all the bits are within a given range or not.\n#\n# This function is used to check whether a given bit is within a given range.\n#\n# The function returns True if the bit is within the range, False otherwise.\n#\n# Example:\n#\n#   >>> check_bit(0, 1)\n#   True\n#\n#   >>> check_bit(0, 2)\n#   False\n",
        "test_code": [
            "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
            "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
            "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
        ]
    },
    {
        "task_description": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
        "generated_code": "Write a python function to check whether the two given strings are isomorphic to each other or not.\n#\n# @param a: the first string\n# @param b: the second string\n# @return: True if the two strings are isomorphic, False otherwise\n#\ndef is_isomorphic(a, b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if",
        "test_code": [
            "assert is_Isomorphic(\"paper\",\"title\") == True",
            "assert is_Isomorphic(\"ab\",\"ba\") == True",
            "assert is_Isomorphic(\"ab\",\"aa\") == False"
        ]
    },
    {
        "task_description": "Write a function to add all the numbers in a list and divide it with the length of the list.",
        "generated_code": "Write a function to add all the numbers in a list and divide it with the length of the list.\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def addAllNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n",
        "test_code": [
            "assert sum_num((8, 2, 3, 0, 7))==4.0",
            "assert sum_num((-10,-20,-30))==-20.0",
            "assert sum_num((19,15,18))==17.333333333333332"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given number is odd or not using bitwise operator.",
        "generated_code": "Write a python function to check whether the given number is odd or not using bitwise operator.\n#\n# This function returns true if the given number is odd, false otherwise.\n#\n# Note:\n#\n# 1. The given number can be represented as an integer using the given base.\n# 2. The given number can be represented as a string using the given base.\n# 3. The given number can be represented as a string using the given base.\n",
        "test_code": [
            "assert is_odd(5) == True",
            "assert is_odd(6) == False",
            "assert is_odd(7) == True"
        ]
    },
    {
        "task_description": "Write a function to substract the elements of the given nested tuples.",
        "generated_code": "Write a function to substract the elements of the given nested tuples.\nfunc (t *NestedTuple) Subtract(subs ...NestedTuple) {\n\tfor _, s := range subs {\n\t\tt.Add(s.Add(t))\n\t}\n}\n\n// Add adds the given element to the given nested tuple.\nfunc (t *NestedTuple) Add(elem NestedTuple) {\n",
        "test_code": [
            "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
        ]
    },
    {
        "task_description": "Write a function to reverse each list in a given list of lists.",
        "generated_code": "Write a function to reverse each list in a given list of lists.\nfunc Reverse(lists []*List) {\n\tfor i := len(lists) - 1; i >= 0; i-- {\n\t\tlists[i].Reverse()\n\t}\n}\n\n// ReverseList is a function to reverse a given list.\nfunc ReverseList(lists []*List) {\n\tfor i := len(lists) - 1; i >= 0; i",
        "test_code": [
            "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
            "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
            "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
        ]
    },
    {
        "task_description": "Write a python function to find the index of an extra element present in one sorted array.",
        "generated_code": "Write a python function to find the index of an extra element present in one sorted array.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findIndex(self, root, val):\n        \"\"\"\n        :type root:",
        "test_code": [
            "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
            "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
            "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given two numbers have same number of digits or not.",
        "generated_code": "Write a python function to check whether the given two numbers have same number of digits or not.\n#\n# @param a: first number\n# @param b: second number\n# @return: True if the two numbers have same number of digits, False otherwise\n#\ndef check_same_digits(a, b):\n    if a == b:\n        return True\n    if a > b:\n        return False\n    return check_same_dig",
        "test_code": [
            "assert same_Length(12,1) == False",
            "assert same_Length(2,2) == True",
            "assert same_Length(10,20) == True"
        ]
    },
    {
        "task_description": "Write a function to remove multiple spaces in a string.",
        "generated_code": "Write a function to remove multiple spaces in a string.\nfunc removeSpaces(s string) string {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n// Remove a string from the end of a string.\nfunc removeEnd(s string) string {\n\treturn strings.TrimSuffix(s, \"\")\n}\n\n// Remove a string from the beginning of a string.\nfunc removeStart(s",
        "test_code": [
            "assert remove_spaces('python  program')==('python program')",
            "assert remove_spaces('python   programming    language')==('python programming language')",
            "assert remove_spaces('python                     program')==('python program')"
        ]
    },
    {
        "task_description": "Write a python function to get the last element of each sublist.",
        "generated_code": "Write a python function to get the last element of each sublist.\n\n# Example:\n\n# def get_last_element(sublist):\n#     return sublist[-1]\n\n# get_last_element([1,2,3])\n# get_last_element([1,2,3,4])\n\n# get_last_element([1,2,3,4,5])\n\n# get_last_element",
        "test_code": [
            "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
            "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
            "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
        ]
    },
    {
        "task_description": "Write a function to convert the given string of float type into tuple.",
        "generated_code": "Write a function to convert the given string of float type into tuple.\nfunc FloatToTuple(s string) (tuple, error) {\n\tvar (\n\t\tf float64\n\t\terr error\n\t)\n\tf, err = strconv.ParseFloat(s, 64)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tuple{f: f}, nil\n}\n\n// FloatToString converts a",
        "test_code": [
            "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
            "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
            "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
        ]
    },
    {
        "task_description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
        "generated_code": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\nInput:\n\nThe first line contains a list of integers.\nThe second line contains a list of integers.\n\nOutput:\n\nThe first line contains a list of integers.\nThe second line contains a list of integers.\n\nConstraints:\n\n1 <= len(first) <= 100\n1 <= len(second) <= 100\n\nExample:\n\n",
        "test_code": [
            "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
            "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
            "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
        ]
    },
    {
        "task_description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
        "generated_code": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         ",
        "test_code": [
            "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
            "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
            "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
        ]
    },
    {
        "task_description": "Write a python function to check whether the word is present in a given sentence or not.",
        "generated_code": "Write a python function to check whether the word is present in a given sentence or not.\n#\n# The function should return True if the word is present in the sentence, False otherwise.\n#\n# Example:\n#\n# Input:\n#\n# \"Hello, world!\"\n#\n# Output:\n#\n# True\n#\n# Explanation:\n# The word \"Hello\" is present in the sentence \"Hello, world!\"\n#\n# Note",
        "test_code": [
            "assert is_Word_Present(\"machine learning\",\"machine\") == True",
            "assert is_Word_Present(\"easy\",\"fun\") == False",
            "assert is_Word_Present(\"python language\",\"code\") == False"
        ]
    },
    {
        "task_description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
        "generated_code": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\n\nInput:\n\nThe first line contains a list of numbers.\nThe second line contains a number.\n\nOutput:\n\nThe first line contains a list of numbers.\nThe second line contains the number of elements in the list.\n\nConstraints:\n\n1 <= list.length <= 100\n1 <= list[i] <= 100\n\nExample:\n",
        "test_code": [
            "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
            "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
            "assert extract_elements([0,0,0,0,0],5)==[0]"
        ]
    },
    {
        "task_description": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
        "generated_code": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n\n# Input:\n# The array to be sorted.\n# The function should return a boolean value.\n# Output:\n# True if the array can be sorted, False otherwise.\n\n# Example:\n# Input:\n# [1,2,3,4,5,6,7,8,9]\n# Output:\n# True\n\n",
        "test_code": [
            "assert check([3,2,1,2,3,4],6) == True",
            "assert check([2,1,4,5,1],5) == True",
            "assert check([1,2,2,1,2,3],6) == True"
        ]
    },
    {
        "task_description": "Write a function where a string will start with a specific number.",
        "generated_code": "Write a function where a string will start with a specific number.\nfunc (f *Func) StartWith(num int) {\n\tf.Start = num\n}\n\n// End returns the end of the function.\nfunc (f *Func) End() int {\n\treturn f.End\n}\n\n// Start returns the start of the function.\nfunc (f *Func) Start() int {\n\treturn f.Start\n}\n",
        "test_code": [
            "assert match_num('5-2345861')==True",
            "assert match_num('6-2345861')==False",
            "assert match_num('78910')==False"
        ]
    },
    {
        "task_description": "Write a function to find the smallest multiple of the first n numbers.",
        "generated_code": "Write a function to find the smallest multiple of the first n numbers.\nfunc FindSmallest(n int) int {\n\tif n < 1 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn FindSmallest(n-1) + FindSmallest(n-2) + FindSmallest(n-3) + FindSmallest(n-4) + FindSmallest(n-5)",
        "test_code": [
            "assert smallest_multiple(13)==360360",
            "assert smallest_multiple(2)==2",
            "assert smallest_multiple(1)==1"
        ]
    },
    {
        "task_description": "Write a function to combine two dictionaries by adding values for common keys.",
        "generated_code": "Write a function to combine two dictionaries by adding values for common keys.\n\n>>> def add_dict(d1, d2):\n...     d1[k] = v\n...     d2[k] = v\n\n>>> d1 = {'a': 1, 'b': 2}\n>>> d2 = {'a': 1, 'b': 2}\n>>> add_dict(d1, d2)\n{'a': 1",
        "test_code": [
            "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
            "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
            "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
        ]
    },
    {
        "task_description": "Write a python function to count the total unset bits from 1 to n.",
        "generated_code": "Write a python function to count the total unset bits from 1 to n.\n\n#include <bitset>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> V",
        "test_code": [
            "assert count_Unset_Bits(2) == 1",
            "assert count_Unset_Bits(5) == 4",
            "assert count_Unset_Bits(14) == 17"
        ]
    },
    {
        "task_description": "Write a function to return true if the given number is even else return false.",
        "generated_code": "Write a function to return true if the given number is even else return false.\nfunc isEven(n int) bool {\n\treturn n%2 == 0\n}\n\n// isEven returns true if the given number is even\nfunc isEven(n int) bool {\n\treturn isEven(n)\n}\n\n// isEven returns true if the given number is odd else return false\nfunc isOdd(n int) bool {\n\treturn !",
        "test_code": [
            "assert even_num(13.5)==False",
            "assert even_num(0)==True",
            "assert even_num(-9)==False"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of squares of binomial co-efficients.",
        "generated_code": "Write a python function to find the sum of squares of binomial co-efficients.\n\n#!/usr/bin/python\n\n# Copyright (c) 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the",
        "test_code": [
            "assert sum_of_square(4) == 70",
            "assert sum_of_square(5) == 252",
            "assert sum_of_square(2) == 6"
        ]
    },
    {
        "task_description": "Write a function to extract year, month and date from a url by using regex.",
        "generated_code": "Write a function to extract year, month and date from a url by using regex.\nfunc ExtractYearMonthDate(url string) (string, string, string, error) {\n\t// Extract year, month and date from url\n\tyear, month, date, err := extractYearMonthDateFromUrl(url)\n\tif err != nil {\n\t\treturn \"\", \"\", \"\", err\n\t}\n\n\t// Return year, month and date\n\treturn year",
        "test_code": [
            "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
            "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
            "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
        ]
    },
    {
        "task_description": "Write a function to print the first n lucky numbers.",
        "generated_code": "Write a function to print the first n lucky numbers.\n#\n# Note:\n# You may assume that the first few numbers are in the range 0 to 9.\n#\n# Example 1:\n#\n# Input: n = 3\n# Output:\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n#\n# Example 2:\n#\n# Input: n = 5\n# Output:\n# [1",
        "test_code": [
            "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
            "assert lucky_num(5)==[1, 3, 7, 9, 13]",
            "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
        ]
    },
    {
        "task_description": "Write a function to find the fixed point in the given array.",
        "generated_code": "Write a function to find the fixed point in the given array.\nfunc FindFixedPoint(array []float64) float64 {\n\tif len(array) == 0 {\n\t\treturn 0\n\t}\n\treturn array[0]\n}\n\n// FindFixedPointInArray returns the fixed point in the given array.\nfunc FindFixedPointInArray(array []float64, value float64) float64 {\n\tif len(array) == 0 {",
        "test_code": [
            "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
            "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
            "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
        ]
    },
    {
        "task_description": "Write a function to find the previous palindrome of a specified number.",
        "generated_code": "Write a function to find the previous palindrome of a specified number.\n\nInput:\n\nThe first number is a positive integer.\n\nOutput:\n\nThe previous palindrome of the first number is a positive integer.\n\nConstraints:\n\n1 <= n <= 100\n\nExplanation:\n\nThe first number is a palindrome of the first number.\n\nExample:\n\nInput:\n\n1\n\nOutput:\n\n",
        "test_code": [
            "assert previous_palindrome(99)==88",
            "assert previous_palindrome(1221)==1111",
            "assert previous_palindrome(120)==111"
        ]
    },
    {
        "task_description": "Write a function to validate a gregorian date.",
        "generated_code": "Write a function to validate a gregorian date.\nfunc validateDate(date time.Time) error {\n\tif date.Year() < 0 || date.Year() > 9999 {\n\t\treturn fmt.Errorf(\"invalid year %d\", date.Year())\n\t}\n\tif date.Month() < 0 || date.Month() > 12 {\n\t\treturn fmt.Errorf(\"invalid month %d\", date.Month())\n\t}",
        "test_code": [
            "assert check_date(11,11,2002)==True",
            "assert check_date(13,11,2002)==False",
            "assert check_date('11','11','2002')==True"
        ]
    },
    {
        "task_description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
        "generated_code": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\n# Definition for a heap node.\nclass HeapNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.parent = None\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype",
        "test_code": [
            "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
            "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
            "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
        ]
    },
    {
        "task_description": "Write a function to find ln, m lobb number.",
        "generated_code": "Write a function to find ln, m lobb number.\nfunc (l *Lobby) FindLobbyNumber(ln int) int {\n\tfor i := 0; i < len(l.Lobbies); i++ {\n\t\tif l.Lobbies[i].LobbyNumber == ln {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// FindLobbyNumberByName returns the lobby number of the lobby with",
        "test_code": [
            "assert int(lobb_num(5, 3)) == 35",
            "assert int(lobb_num(3, 2)) == 5",
            "assert int(lobb_num(4, 2)) == 20"
        ]
    },
    {
        "task_description": "Write a function to check for a number at the end of a string.",
        "generated_code": "Write a function to check for a number at the end of a string.\nfunc checkEndOfString(s string) bool {\n\treturn s[len(s)-1] == '\\n'\n}\n\n// checkEndOfLine checks for a line ending in a string.\nfunc checkEndOfLine(s string) bool {\n\treturn s[len(s)-1] == '\\n'\n}\n\n// checkEndOfLine returns true",
        "test_code": [
            "assert end_num('abcdef')==False",
            "assert end_num('abcdef7')==True",
            "assert end_num('abc')==False"
        ]
    },
    {
        "task_description": "Write a python function to check whether the given string is made up of two alternating characters or not.",
        "generated_code": "Write a python function to check whether the given string is made up of two alternating characters or not.\n#\n# Example:\n#\n#     def is_even(string):\n#         return string.count(string[0]) % 2 == 0\n#\n# Returns True if the given string is made up of two alternating characters, False otherwise.\n#\n# Note:\n#\n#     The string must not contain any null characters.\n#\n#     ",
        "test_code": [
            "assert is_Two_Alter(\"abab\") == True",
            "assert is_Two_Alter(\"aaaa\") == False",
            "assert is_Two_Alter(\"xyz\") == False"
        ]
    },
    {
        "task_description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
        "generated_code": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\n\n# Note:\n# The function should return the index of the first element that is not equal to the given value.\n# The function should return the index of the first element that is equal to the given value.\n# The function should return the index of the first element that is not equal to the given value.\n# The function should return the index of the first element that is equal",
        "test_code": [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
        ]
    },
    {
        "task_description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
        "generated_code": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\nfunc findTriplet(array []int, sum int) bool {\n\tfor i := 0; i < len(array); i++ {\n\t\tif array[i] == sum {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// findTriplet2 finds the triplet in the array whose sum is equal to a",
        "test_code": [
            "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
            "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
            "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
        ]
    },
    {
        "task_description": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
        "generated_code": "Write a function to find the sequences of one upper case letter followed by lower case letters.\n#\n# Note:\n#\n# 1. The function should return a list of strings.\n# 2. The function should return a list of strings.\n# 3. The function should return a list of strings.\n# 4. The function should return a list of strings.\n# 5. The function should return a list of strings.\n# 6. The function should return a",
        "test_code": [
            "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
            "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
            "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
        ]
    },
    {
        "task_description": "Write a function to count coin change.",
        "generated_code": "Write a function to count coin change.\nfunc (c *CoinChange) CountCoinChange() int {\n\treturn c.countCoinChange\n}\n\n// SetCoinChange sets the coin change function.\nfunc (c *CoinChange) SetCoinChange(countCoinChange int) {\n\tc.countCoinChange = countCoinChange\n}\n\n// GetCoinChange returns the coin change function.\nfunc (c *CoinChange) GetCoinChange() int",
        "test_code": [
            "assert coin_change([1, 2, 3],3,4)==4",
            "assert coin_change([4,5,6,7,8,9],6,9)==2",
            "assert coin_change([4,5,6,7,8,9],6,4)==1"
        ]
    },
    {
        "task_description": "Write a python function to multiply all items in the list.",
        "generated_code": "Write a python function to multiply all items in the list.\n#\n# The function takes a list of items and returns a list of items.\n#\n# Example:\n#\n#     def multiply_all_items(items):\n#         return [x * y for x, y in zip(items, items)]\n#\n# This function will multiply all items in the list.\n#\n# Note:\n#\n#     The function will not modify the",
        "test_code": [
            "assert multiply_list([1,-2,3]) == -6",
            "assert multiply_list([1,2,3,4]) == 24",
            "assert multiply_list([3,1,2,3]) == 18"
        ]
    },
    {
        "task_description": "Write a function to remove all tuples with all none values in the given tuple list.",
        "generated_code": "Write a function to remove all tuples with all none values in the given tuple list.\nfunc removeAllTuples(tupleList []interface{}, removeAll bool) []interface{} {\n\tif removeAll {\n\t\tfor _, tuple := range tupleList {\n\t\t\tif tuple == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, value := range tuple.([]interface{}) {\n\t\t\t\tif value == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n",
        "test_code": [
            "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
            "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
            "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
        ]
    },
    {
        "task_description": "Write a function to perform chunking of tuples each of size n.",
        "generated_code": "Write a function to perform chunking of tuples each of size n.\n\n>>> def f(x):\n...     return x[0] + x[1]\n\n>>> def f(x):\n...     return x[0] + x[1]\n\n>>> def f(x):\n...     return x[0] + x[1]\n\n>>> def f(x):\n...     return x[0] + x[1]\n",
        "test_code": [
            "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
            "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
            "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
        ]
    },
    {
        "task_description": "Write a function to find a pair with the highest product from a given array of integers.",
        "generated_code": "Write a function to find a pair with the highest product from a given array of integers.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findPair(self, nums):\n        \"\"\"\n        :type nums",
        "test_code": [
            "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
            "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
            "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
        ]
    },
    {
        "task_description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
        "generated_code": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findShortestSubstring(self, str1, str2",
        "test_code": [
            "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
            "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
            "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
        ]
    },
    {
        "task_description": "Write a function to find maximum of two numbers.",
        "generated_code": "Write a function to find maximum of two numbers.\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// maxInt returns the maximum of two given integers.\nfunc maxInt(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// maxFloat returns the maximum of two given floats.\n",
        "test_code": [
            "assert max_of_two(10,20)==20",
            "assert max_of_two(19,15)==19",
            "assert max_of_two(-10,-20)==-10"
        ]
    },
    {
        "task_description": "Write a python function to calculate the product of all the numbers of a given tuple.",
        "generated_code": "Write a python function to calculate the product of all the numbers of a given tuple.\n\n# Note:\n# The function is not recursive.\n\n# Example:\n# (1, 2, 3) -> (6, 12, 6)\n# (1, 2, 3, 4) -> (6, 12, 6, 4)\n# (1, 2, 3, 4, 5) -> (6, 12, 6, 4, 5)\n\n",
        "test_code": [
            "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
            "assert mutiple_tuple((1,2,3)) == 6",
            "assert mutiple_tuple((-2,-4,-6)) == -48"
        ]
    },
    {
        "task_description": "Write a function to find n-th rencontres number.",
        "generated_code": "Write a function to find n-th rencontres number.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int n, k;\n    cin >> n >> k;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin",
        "test_code": [
            "assert rencontres_number(7, 2) == 924",
            "assert rencontres_number(3, 0) == 2",
            "assert rencontres_number(3, 1) == 3"
        ]
    },
    {
        "task_description": "Write a function to calculate the height of the given binary tree.",
        "generated_code": "Write a function to calculate the height of the given binary tree.\nfunc BinaryTreeHeight(root *BinaryTreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn BinaryTreeHeight(root.Left) + BinaryTreeHeight(root.Right)\n}\n\n// BinaryTreeHeight calculates the height of the given binary tree.\nfunc BinaryTreeHeight(root *BinaryTreeNode) int {\n\tif root == nil",
        "test_code": [
            "assert (max_height(root)) == 3",
            "assert (max_height(root1)) == 5 ",
            "assert (max_height(root2)) == 4"
        ]
    },
    {
        "task_description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "generated_code": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc DateToString(date time.Time) string {\n\treturn fmt.Sprintf(\"%d-%02d-%02d\", date.Year(), date.Month(), date.Day())\n}\n\n// Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc StringToDate",
        "test_code": [
            "assert change_date_format('2026-01-02')=='02-01-2026'",
            "assert change_date_format('2021-01-04')=='04-01-2021'",
            "assert change_date_format('2030-06-06')=='06-06-2030'"
        ]
    },
    {
        "task_description": "Write a function to count repeated items of a tuple.",
        "generated_code": "Write a function to count repeated items of a tuple.\nfunc CountRepeated(t *testing.T, count int) {\n\tt.Helper()\n\tfor i := 0; i < count; i++ {\n\t\tt.Logf(\"%d\", i)\n\t}\n}\n\n// TestCountRepeated tests that CountRepeated works correctly.\nfunc TestCountRepeated(t *testing.T) {\n\tt.Parallel()",
        "test_code": [
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
            "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
        ]
    },
    {
        "task_description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
        "generated_code": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\nfunc (f *Function) Match(string string) *Function {\n\treturn f.MatchString(string)\n}\n\n// MatchString matches a string that has an a followed by zero or more b's by using regex.\nfunc (f *Function) MatchString(string string) *Function {\n\tif f.regex == nil {\n\t\t",
        "test_code": [
            "assert text_match(\"msb\") == 'Not matched!'",
            "assert text_match(\"a0c\") == 'Found a match!'",
            "assert text_match(\"abbc\") == 'Found a match!'"
        ]
    },
    {
        "task_description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.",
        "generated_code": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\nfunc SumSeries(series []float64) float64 {\n\tsum := 0.0\n\tfor _, v := range series {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n// SumSeries2 calculates the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026+n\u00b3.",
        "test_code": [
            "assert sum_series(7)==784",
            "assert sum_series(5)==225",
            "assert sum_series(15)==14400"
        ]
    },
    {
        "task_description": "Write a function to remove duplicate words from a given list of strings.",
        "generated_code": "Write a function to remove duplicate words from a given list of strings.\nfunc RemoveDuplicates(s []string) []string {\n\tif len(s) == 0 {\n\t\treturn s\n\t}\n\tseen := make(map[string]bool)\n\tseen[s[0]] = true\n\tseen[s[len(s)-1]] = true\n\tresult := make([]string, 0, len(s))\n\tfor _",
        "test_code": [
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
        ]
    },
    {
        "task_description": "Write a function to convert camel case string to snake case string by using regex.",
        "generated_code": "Write a function to convert camel case string to snake case string by using regex.\nfunc CamelCase(s string) string {\n\treturn strings.ToLower(strings.Replace(s, \"-\", \"_\", -1))\n}\n\n// SnakeCase converts a camel case string to snake case string by using regex.\nfunc SnakeCase(s string) string {\n\treturn strings.ToLower(strings.Replace(s, \"_\", \"\", -1))",
        "test_code": [
            "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
            "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
            "assert camel_to_snake('QuadCore') == 'quad_core'"
        ]
    },
    {
        "task_description": "Write a function to find the nth delannoy number.",
        "generated_code": "Write a function to find the nth delannoy number.\nfunc FindNth(n int) int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\treturn n % 10\n}\n\n// FindNth2 finds the nth delannoy number in a list.\nfunc FindNth2(n int, list []int) int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif len(",
        "test_code": [
            "assert dealnnoy_num(3, 4) == 129",
            "assert dealnnoy_num(3, 3) == 63",
            "assert dealnnoy_num(4, 5) == 681"
        ]
    },
    {
        "task_description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.",
        "generated_code": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n#\n# The function is given the following parameters:\n#\n#   - n: the number of series to calculate\n#   - x: the first series\n#   - y: the second series\n#   - z: the third series\n#   - a: the first series\n#   - b: the second series\n#   - c:",
        "test_code": [
            "assert series_sum(6)==91",
            "assert series_sum(7)==140",
            "assert series_sum(12)==650"
        ]
    },
    {
        "task_description": "Write a function to re-arrange the given tuples based on the given ordered list.",
        "generated_code": "Write a function to re-arrange the given tuples based on the given ordered list.\nfunc Reorder(tuples []interface{}, ordered []interface{}) {\n\tfor i := 0; i < len(ordered); i++ {\n\t\tfor j := i + 1; j < len(ordered); j++ {\n\t\t\tif ordered[i] < ordered[j] {\n\t\t\t\tswap(ordered, i, j)\n\t\t\t}\n\t\t}",
        "test_code": [
            "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
            "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
            "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
        ]
    },
    {
        "task_description": "Write a function to count the most common character in a given string.",
        "generated_code": "Write a function to count the most common character in a given string.\nfunc CountMostCommonChar(s string) int {\n\tcount := 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == ' ' {\n\t\t\tcount++\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn count\n}\n\n// Count the number of characters in a given string.\nfunc CountCharacters(",
        "test_code": [
            "assert max_char(\"hello world\")==('l')",
            "assert max_char(\"hello \")==('l')",
            "assert max_char(\"python pr\")==('p')"
        ]
    },
    {
        "task_description": "Write a function to find three closest elements from three sorted arrays.",
        "generated_code": "Write a function to find three closest elements from three sorted arrays.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> threeClosest(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        vector<int> res;\n        sort(",
        "test_code": [
            "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
            "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
            "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
        ]
    },
    {
        "task_description": "Write a function to sort a list of dictionaries using lambda function.",
        "generated_code": "Write a function to sort a list of dictionaries using lambda function.\n#\n# The function is passed a list of dictionaries, and returns a list of dictionaries sorted by lambda function.\n#\n# Example:\n#\n# sort_list = lambda x: x['name']\n#\n# sort_list(['name', 'age'])\n#\n# sort_list(['name', 'age'])\n#\n# sort_list(['",
        "test_code": [
            "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
            "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
            "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
        ]
    },
    {
        "task_description": "Write a function to sort the given array by using heap sort.",
        "generated_code": "Write a function to sort the given array by using heap sort.\nfunc Sort(arr []int) {\n\theap.Init(arr)\n\tfor len(arr) > 0 {\n\t\ti := heap.Pop(arr)\n\t\tarr[len(arr)-1] = arr[i]\n\t\theap.Push(arr, i)\n\t}\n}\n\n// SortByHeap sorts the given array by using heap sort.\nfunc",
        "test_code": [
            "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
            "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
            "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
        ]
    },
    {
        "task_description": "Write a function to count the elements in a list until an element is a tuple.",
        "generated_code": "Write a function to count the elements in a list until an element is a tuple.\n\n>>> def count_until_tuple(list):\n...     return len(list)\n\n>>> count_until_tuple([1, 2, 3])\n3\n\n>>> count_until_tuple([1, 2, 3, 4])\n4\n\n>>> count_until_tuple([1, 2, 3, 4, 5])\n5\n\n",
        "test_code": [
            "assert count_elim([10,20,30,(10,20),40])==3",
            "assert count_elim([10,(20,30),(10,20),40])==1",
            "assert count_elim([(10,(20,30,(10,20),40))])==0"
        ]
    },
    {
        "task_description": "Write a function to check if any list element is present in the given list.",
        "generated_code": "Write a function to check if any list element is present in the given list.\nfunc (l *List) Contains(elem interface{}) bool {\n\tfor _, v := range l.List {\n\t\tif v == elem {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Remove removes the given element from the list.\nfunc (l *List) Remove(elem interface{}) {\n\tfor i,",
        "test_code": [
            "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
            "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
            "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
        ]
    },
    {
        "task_description": "Write a function to combine two given sorted lists using heapq module.",
        "generated_code": "Write a function to combine two given sorted lists using heapq module.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <climits>",
        "test_code": [
            "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
            "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
            "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
        ]
    },
    {
        "task_description": "Write a function to separate and print the numbers and their position of a given string.",
        "generated_code": "Write a function to separate and print the numbers and their position of a given string.\n\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    vector<string> v;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == '(') {",
        "test_code": [
            "assert num_position(\"there are 70 flats in this apartment\")==10",
            "assert num_position(\"every adult have 32 teeth\")==17",
            "assert num_position(\"isha has 79 chocolates in her bag\")==9"
        ]
    },
    {
        "task_description": "Write a function to convert the given tuples into set.",
        "generated_code": "Write a function to convert the given tuples into set.\nfunc Convert(tuple ...interface{}) (set map[string]struct{}) {\n\tset = make(map[string]struct{})\n\tfor _, t := range tuple {\n\t\tset[t.String()] = struct{}{}\n\t}\n\treturn\n}\n\n// ConvertToSet converts the given set into a set.\nfunc ConvertToSet(set map[",
        "test_code": [
            "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
            "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
            "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
        ]
    },
    {
        "task_description": "Write a function to find the most common elements and their counts of a specified text.",
        "generated_code": "Write a function to find the most common elements and their counts of a specified text.\nfunc FindMostCommonElements(text string) ([]string, int) {\n\tvar result []string\n\tvar count int\n\tfor _, c := range text {\n\t\tif c == ' ' {\n\t\t\tcontinue\n\t\t}\n\t\tif c == '\\t' {\n\t\t\tcount++\n\t\t}\n\t\tresult = append(result, string(c))\n",
        "test_code": [
            "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
        ]
    },
    {
        "task_description": "Write a python function to find the length of the shortest word.",
        "generated_code": "Write a python function to find the length of the shortest word.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findLength(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype",
        "test_code": [
            "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
            "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
        ]
    },
    {
        "task_description": "Write a function to get an item of a tuple.",
        "generated_code": "Write a function to get an item of a tuple.\n    def get_item(self, item):\n        return self.items[item]\n\n    # Get the number of items in the tuple.\n    def get_num_items(self):\n        return len(self.items)\n\n    # Get the tuple of items.\n    def get_items(self):\n        return self.items\n\n    # Get the tuple of items.\n    def get",
        "test_code": [
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
        ]
    },
    {
        "task_description": "Write a function to sort the given tuple list basis the total digits in tuple.",
        "generated_code": "Write a function to sort the given tuple list basis the total digits in tuple.\nfunc SortTuple(tupleList []int) {\n\t// Sort the tuple list by total digits.\n\tsort.Ints(tupleList)\n\n\t// Sort the tuple list by total digits.\n\tsort.Ints(tupleList)\n}\n\n// SortTupleByTotalDigits sorts the given tuple list by total digits.\nfunc SortTupleBy",
        "test_code": [
            "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
            "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
            "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
        ]
    },
    {
        "task_description": "Write a function to display sign of the chinese zodiac for given year.",
        "generated_code": "Write a function to display sign of the chinese zodiac for given year.\nfunc (z *ChineseZodiac) DisplaySign(year int) {\n\tif year < 1 {\n\t\treturn\n\t}\n\tif z.ChineseZodiac == nil {\n\t\tz.ChineseZodiac = make(map[int]*ChineseZodiac)\n\t}\n\tif z.ChineseZodiac[year] == nil {\n\t\tz.ChineseZodiac[",
        "test_code": [
            "assert chinese_zodiac(1997)==('Ox')",
            "assert chinese_zodiac(1998)==('Tiger')",
            "assert chinese_zodiac(1994)==('Dog')"
        ]
    },
    {
        "task_description": "Write a function to find the maximum of similar indices in two lists of tuples.",
        "generated_code": "Write a function to find the maximum of similar indices in two lists of tuples.\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def maxSimilar(self, left, right):\n        \"\"\"\n        :type left: Tree",
        "test_code": [
            "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
            "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
            "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
        ]
    },
    {
        "task_description": "Write a function to compute the value of ncr mod p.",
        "generated_code": "Write a function to compute the value of ncr mod p.\nfunc ncrMod(n, p uint64) uint64 {\n\treturn (n + p - 1) % p\n}\n\n// ncrModInt computes the value of ncr mod p.\nfunc ncrModInt(n, p uint64) int {\n\treturn int(ncrMod(n, p))\n}\n\n// ncrModInt64 computes the",
        "test_code": [
            "assert nCr_mod_p(10, 2, 13) == 6",
            "assert nCr_mod_p(11, 3, 14) == 11",
            "assert nCr_mod_p(18, 14, 19) == 1"
        ]
    },
    {
        "task_description": "Write a python function to find the minimun number of subsets with distinct elements.",
        "generated_code": "Write a python function to find the minimun number of subsets with distinct elements.\n\n# Input\n\n# Input:\n# 1. A list of integers.\n# 2. A list of strings.\n# 3. A list of lists of integers.\n# 4. A list of lists of strings.\n# 5. A list of lists of lists of integers.\n# 6. A list of lists of lists of strings.\n# 7. A list of lists",
        "test_code": [
            "assert subset([1, 2, 3, 4],4) == 1",
            "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
            "assert subset([1, 2, 3 ],3) == 1"
        ]
    },
    {
        "task_description": "Write a function that gives profit amount if the given amount has profit else return none.",
        "generated_code": "Write a function that gives profit amount if the given amount has profit else return none.\nfunc profit(amount int) func() int {\n\treturn func() int {\n\t\tif amount == 0 {\n\t\t\treturn 0\n\t\t}\n\t\treturn amount - 1\n\t}\n}\n\n// profit2 returns profit amount if the given amount has profit else return none.\nfunc profit2(amount int) func() int {\n\treturn func() int {\n\t\tif",
        "test_code": [
            "assert profit_amount(1500,1200)==300",
            "assert profit_amount(100,200)==None",
            "assert profit_amount(2000,5000)==None"
        ]
    },
    {
        "task_description": "Write a function to find out, if the given number is abundant.",
        "generated_code": "Write a function to find out, if the given number is abundant.\nfunc isAbundant(n int) bool {\n\tif n == 0 {\n\t\treturn true\n\t}\n\tif n == 1 {\n\t\treturn false\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tfor i := 1; i < n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}",
        "test_code": [
            "assert is_abundant(12)==True",
            "assert is_abundant(13)==False",
            "assert is_abundant(9)==False"
        ]
    },
    {
        "task_description": "Write a function to split the given string at uppercase letters by using regex.",
        "generated_code": "Write a function to split the given string at uppercase letters by using regex.\nfunc Split(s string) []string {\n\treturn strings.Split(s, \"\")\n}\n\n// SplitBy returns a slice of strings that are split by the given regex.\nfunc SplitBy(s string, regex string) []string {\n\treturn strings.Split(s, regex)\n}\n\n// SplitByAny returns a slice of strings that are split by",
        "test_code": [
            "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
            "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
            "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
        ]
    },
    {
        "task_description": "Write a python function to get the position of rightmost set bit.",
        "generated_code": "Write a python function to get the position of rightmost set bit.\n#\n# @param n the number of bits to get\n# @return the position of the rightmost set bit\n# @note: the function returns 0 if the number of bits is 0\n# @note: the function returns -1 if the number of bits is negative\n# @note: the function returns -2 if the number of bits is negative and the number of bits is 0\n# @note",
        "test_code": [
            "assert get_First_Set_Bit_Pos(12) == 3",
            "assert get_First_Set_Bit_Pos(18) == 2",
            "assert get_First_Set_Bit_Pos(16) == 5"
        ]
    },
    {
        "task_description": "Write a function to convert an integer into a roman numeral.",
        "generated_code": "Write a function to convert an integer into a roman numeral.\nfunc RomanToRoman(i int) string {\n\tvar roman string\n\tswitch i {\n\tcase 1:\n\t\troman = \"I\"\n\tcase 2:\n\t\troman = \"II\"\n\tcase 3:\n\t\troman = \"III\"\n\tcase 4:\n\t\troman = \"IV\"\n\tcase 5:\n\t\troman = \"V\"\n\tcase 6",
        "test_code": [
            "assert int_to_roman(1)==(\"I\")",
            "assert int_to_roman(50)==(\"L\")",
            "assert int_to_roman(4)==(\"IV\")"
        ]
    },
    {
        "task_description": "Write a python function to find the average of a list.",
        "generated_code": "Write a python function to find the average of a list.\n\n#!/usr/bin/env python\n\nimport sys\nimport math\n\ndef average(list):\n    return sum(list) / len(list)\n\ndef main():\n    if len(sys.argv) < 2:\n        print \"Usage: python average.py <list>\"\n        return\n\n    list = [int(x) for x in sys.argv[1",
        "test_code": [
            "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
            "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
            "assert Average([1,2,3]) == 2"
        ]
    },
    {
        "task_description": "Write a function to solve tiling problem.",
        "generated_code": "Write a function to solve tiling problem.\n    \"\"\"\n    def __init__(self, n, m, x, y, z):\n        self.n = n\n        self.m = m\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def solve(self):\n        \"\"\"\n        Solve the tiling problem.\n        \"\"\"\n        return self.x[self.y] +",
        "test_code": [
            "assert get_noOfways(4)==3",
            "assert get_noOfways(3)==2",
            "assert get_noOfways(5)==5"
        ]
    },
    {
        "task_description": "Write a function to convert a roman numeral to an integer.",
        "generated_code": "Write a function to convert a roman numeral to an integer.\nfunc RomanToInt(s string) int {\n\treturn strconv.Atoi(s)\n}\n\n// RomanToInt converts a roman numeral to an integer.\nfunc RomanToInt32(s string) int32 {\n\treturn strconv.Atoi(s)\n}\n\n// RomanToInt64 converts a roman numeral to an integer.\n",
        "test_code": [
            "assert roman_to_int('MMMCMLXXXVI')==3986",
            "assert roman_to_int('MMMM')==4000",
            "assert roman_to_int('C')==100"
        ]
    },
    {
        "task_description": "Write a python function to find the sum of all even natural numbers within the range l and r.",
        "generated_code": "Write a python function to find the sum of all even natural numbers within the range l and r.\n\n# Note:\n# The function is defined as a function that takes two integers as arguments and returns a integer.\n# The function should return the sum of the even numbers in the range l and r.\n\n# Example:\n# Given l = 3, r = 5, return 6.\n#\n# Note:\n# The function is defined as a function that takes",
        "test_code": [
            "assert sum_Even(2,5) == 6",
            "assert sum_Even(3,8) == 18",
            "assert sum_Even(4,6) == 10"
        ]
    },
    {
        "task_description": "Write a function to calculate the discriminant value.",
        "generated_code": "Write a function to calculate the discriminant value.\nfunc (f *Func) discriminant(x float64) float64 {\n\treturn x * x - f.a * f.b\n}\n\n// A function that returns the square of the discriminant.\ntype SquareFunc struct {\n\ta, b float64\n}\n\n// A function that returns the square of the discriminant.\nfunc (f *SquareFunc) discriminant(",
        "test_code": [
            "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
            "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
            "assert discriminant_value(0,0,9)==(\"one solution\",0)"
        ]
    },
    {
        "task_description": "Write a python function to check whether the length of the word is even or not.",
        "generated_code": "Write a python function to check whether the length of the word is even or not.\ndef check_length(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n\n# This function will check whether the word is a valid word.\ndef is_valid_word(word):\n    if len(word) == 1:\n        return True\n    else:\n        return False\n\n# This",
        "test_code": [
            "assert word_len(\"program\") == False",
            "assert word_len(\"solution\") == True",
            "assert word_len(\"data\") == True"
        ]
    },
    {
        "task_description": "Write a function to convert camel case string to snake case string.",
        "generated_code": "Write a function to convert camel case string to snake case string.\nfunc CamelCase(s string) string {\n\treturn strings.Map(func(r rune) rune {\n\t\tif r == '_' {\n\t\t\treturn '-'\n\t\t}\n\t\treturn r\n\t}, s)\n}\n\n// SnakeCase converts a string to camel case.\nfunc SnakeCase(s string) string {\n\treturn CamelCase(strings.ToLower(s))",
        "test_code": [
            "assert camel_to_snake('PythonProgram')==('python_program')",
            "assert camel_to_snake('pythonLanguage')==('python_language')",
            "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
        ]
    },
    {
        "task_description": "Write a function to remove an empty tuple from a list of tuples.",
        "generated_code": "Write a function to remove an empty tuple from a list of tuples.\nfunc removeEmptyTuple(list []interface{}) []interface{} {\n\tif len(list) == 0 {\n\t\treturn nil\n\t}\n\tfor i := len(list) - 1; i >= 0; i-- {\n\t\tif list[i] == nil {\n\t\t\tlist = list[:i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn list",
        "test_code": [
            "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
            "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
            "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
        ]
    },
    {
        "task_description": "Write a python function to accept the strings which contains all vowels.",
        "generated_code": "Write a python function to accept the strings which contains all vowels.\n#\n# The function accepts a string and returns a list of all the vowels.\n#\n# Example:\n#\n# Input:\n#\n# \"a\"\n# \"b\"\n# \"c\"\n#\n# Output:\n#\n# [\"a\", \"b\", \"c\"]\n#\n# Explanation:\n#\n# The function accepts a string and returns a",
        "test_code": [
            "assert check(\"SEEquoiaL\") == 'accepted'",
            "assert check('program') == \"not accepted\"",
            "assert check('fine') == \"not accepted\""
        ]
    },
    {
        "task_description": "Write a python function to find maximum possible value for the given periodic function.",
        "generated_code": "Write a python function to find maximum possible value for the given periodic function.\n    \"\"\"\n    def f(x):\n        return max(x, 0)\n    return f\n\n\ndef f_max(f):\n    \"\"\"\n    Find maximum value for given periodic function.\n    \"\"\"\n    return f(max(f(0), f(1)))\n\n\ndef f_min(f):\n    \"\"\"\n    Find minimum value for given periodic function.",
        "test_code": [
            "assert floor_Max(11,10,9) == 9",
            "assert floor_Max(5,7,4) == 2",
            "assert floor_Max(2,2,1) == 1"
        ]
    },
    {
        "task_description": "Write a function to join the tuples if they have similar initial elements.",
        "generated_code": "Write a function to join the tuples if they have similar initial elements.\nfunc (t *Tuple) join(other *Tuple) {\n\tif len(t.elements) == 0 {\n\t\treturn\n\t}\n\tif len(other.elements) == 0 {\n\t\treturn\n\t}\n\tif t.elements[0].value != other.elements[0].value {\n\t\tt.elements[0].value",
        "test_code": [
            "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
            "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
            "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
        ]
    },
    {
        "task_description": "Write a function to find minimum of two numbers.",
        "generated_code": "Write a function to find minimum of two numbers.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    sort(v.begin(),",
        "test_code": [
            "assert min_of_two(10,20)==10",
            "assert min_of_two(19,15)==15",
            "assert min_of_two(-10,-20)==-20"
        ]
    },
    {
        "task_description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
        "generated_code": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\nInput:\n\nn = an integer\n\nOutput:\n\nThe maximum number of segments of lengths a, b and c that can be formed from n.\n\nConstraints:\n\n1 <= n <= 100\n\nConstraints:\n\n1 <= a, b, c <= 100\n\nConstraints:\n\n1 <= a",
        "test_code": [
            "assert maximum_segments(7, 5, 2, 5) == 2",
            "assert maximum_segments(17, 2, 1, 3) == 17",
            "assert maximum_segments(18, 16, 3, 6) == 6"
        ]
    },
    {
        "task_description": "Write a function to concatenate the given two tuples to a nested tuple.",
        "generated_code": "Write a function to concatenate the given two tuples to a nested tuple.\nfunc concat(t1, t2 ...interface{}) (interface{}, error) {\n\tif len(t1) != len(t2) {\n\t\treturn nil, fmt.Errorf(\"expected %d elements, got %d\", len(t1), len(t2))\n\t}\n\n\tvar result interface{}\n\tfor i, v := range",
        "test_code": [
            "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
            "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
            "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
        ]
    },
    {
        "task_description": "Write a python function to left rotate the string.",
        "generated_code": "Write a python function to left rotate the string.\n    \"\"\"\n    def __init__(self, string):\n        self.string = string\n        self.rotate(string)\n\n    def rotate(self, string):\n        \"\"\"\n        Rotate the string by the given amount.\n        \"\"\"\n        self.string = self.string[::-1] + string[::-1]\n        return self\n\n    def __str__(self):",
        "test_code": [
            "assert left_rotate(\"python\",2) == \"thonpy\"   ",
            "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
            "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
        ]
    },
    {
        "task_description": "Write a function to find the minimum total path sum in the given triangle.",
        "generated_code": "Write a function to find the minimum total path sum in the given triangle.\nfunc MinPathSum(t *Triangle) int {\n\tvar sum int\n\tfor i := 0; i < len(t.Vertices); i++ {\n\t\tsum += t.Vertices[i]\n\t}\n\treturn sum\n}\n\n// Find the minimum total path sum in the given triangle.\nfunc MinPathSum2(t *Triangle) int {",
        "test_code": [
            "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
            "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
            "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
        ]
    }
]